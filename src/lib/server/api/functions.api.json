{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.6",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "http://github.com/donmccurdy/glTF-Transform/tree/main/packages/functions",
  "kind": "Package",
  "canonicalReference": "@gltf-transform/functions!",
  "docComment": "",
  "name": "@gltf-transform/functions",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@gltf-transform/functions!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!center:function(1)",
          "docComment": "/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation, skinning, and morph targets are not taken into account.\n *\n * Example:\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function center(_options?: "
            },
            {
              "kind": "Reference",
              "text": "CenterOptions",
              "canonicalReference": "@gltf-transform/functions!CenterOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/center.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "center"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!CenterOptions:interface",
          "docComment": "/**\n * Options for the {@link center} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CenterOptions "
            }
          ],
          "fileUrlPath": "dist/center.d.ts",
          "releaseTag": "Public",
          "name": "CenterOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!CenterOptions#pivot:member",
              "docComment": "/**\n * Location on the model to be considered the pivot, and recentered at the origin.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pivot?: "
                },
                {
                  "kind": "Content",
                  "text": "'center' | 'above' | 'below' | "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pivot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!colorspace:function(1)",
          "docComment": "/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored as linear values, and this function provides a way to correct vertex colors that are (incorrectly) sRGB.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function colorspace(options: "
            },
            {
              "kind": "Reference",
              "text": "ColorspaceOptions",
              "canonicalReference": "@gltf-transform/functions!ColorspaceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/colorspace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "colorspace"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!ColorspaceOptions:interface",
          "docComment": "/**\n * Options for the {@link colorspace} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ColorspaceOptions "
            }
          ],
          "fileUrlPath": "dist/colorspace.d.ts",
          "releaseTag": "Public",
          "name": "ColorspaceOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!ColorspaceOptions#inputEncoding:member",
              "docComment": "/**\n * Must be `\"sRGB\"`. Required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputEncoding: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inputEncoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!createLayoutPlan:function(1)",
          "docComment": "/**\n * Constructs a plan for processing vertex streams, based on unique index:attribute[] groups. Where different indices are used with the same attributes, we'll end up splitting the primitives to not share attributes, which appears to be consistent with the Meshopt implementation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createLayoutPlan(document: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LayoutPlan",
              "canonicalReference": "@gltf-transform/functions!~LayoutPlan:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/reorder.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "createLayoutPlan"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!dedup:var",
          "docComment": "/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material} properties. Partially based on a [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "dedup: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "DedupOptions",
              "canonicalReference": "@gltf-transform/functions!DedupOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/dedup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "dedup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!DedupOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DedupOptions "
            }
          ],
          "fileUrlPath": "dist/dedup.d.ts",
          "releaseTag": "Public",
          "name": "DedupOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DedupOptions#propertyTypes:member",
              "docComment": "/**\n * List of {@link PropertyType} identifiers to be de-duplicated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyTypes: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!dequantize:function(1)",
          "docComment": "/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`} if present. Dequantization will increase the size of the mesh on disk and in memory, but may be necessary for compatibility with applications that don't support quantization.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dequantize(_options?: "
            },
            {
              "kind": "Reference",
              "text": "DequantizeOptions",
              "canonicalReference": "@gltf-transform/functions!DequantizeOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/dequantize.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "dequantize"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!DequantizeOptions:interface",
          "docComment": "/**\n * Options for the {@link dequantize} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DequantizeOptions "
            }
          ],
          "fileUrlPath": "dist/dequantize.d.ts",
          "releaseTag": "Public",
          "name": "DequantizeOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DequantizeOptions#pattern:member",
              "docComment": "/**\n * Pattern (regex) used to filter vertex attribute semantics for quantization. Default: `/^((?!JOINTS_).)*$/`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!DRACO_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DRACO_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "DracoOptions",
              "canonicalReference": "@gltf-transform/functions!DracoOptions:interface"
            }
          ],
          "fileUrlPath": "dist/draco.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DRACO_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!draco:var",
          "docComment": "/**\n * Applies Draco compression using {@link DracoMeshCompression KHR_draco_mesh_compression}. This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link DracoMeshCompression} extension itself.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "draco: "
            },
            {
              "kind": "Content",
              "text": "(_options: "
            },
            {
              "kind": "Reference",
              "text": "DracoOptions",
              "canonicalReference": "@gltf-transform/functions!DracoOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/draco.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "draco",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!DracoOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DracoOptions "
            }
          ],
          "fileUrlPath": "dist/draco.d.ts",
          "releaseTag": "Public",
          "name": "DracoOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#decodeSpeed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decodeSpeed?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "decodeSpeed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#encodeSpeed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encodeSpeed?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encodeSpeed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method?: "
                },
                {
                  "kind": "Content",
                  "text": "'edgebreaker' | 'sequential'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizationVolume:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizationVolume?: "
                },
                {
                  "kind": "Content",
                  "text": "'mesh' | 'scene'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizationVolume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizeColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeColor?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizeGeneric:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeGeneric?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizeNormal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeNormal?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeNormal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizePosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizePosition?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizePosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!DracoOptions#quantizeTexcoord:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeTexcoord?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeTexcoord",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!getTextureChannelMask:function(1)",
          "docComment": "/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the given texture. Determination is based only on the _role_ of the textures, e.g. a texture used for the `occlusionTexture` will have (at least) a red channel. See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n * ```js\n * const mask = getTextureChannelMask(document, texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTextureChannelMask(document: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": ", texture: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@gltf-transform/core!Texture:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/list-texture-channels.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "texture",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getTextureChannelMask"
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!inspect:function(1)",
          "docComment": "/**\n * Inspects the contents of a glTF file and returns a JSON report.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inspect(doc: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "InspectReport",
              "canonicalReference": "@gltf-transform/functions!InspectReport:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inspect"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectAnimationReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectAnimationReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectAnimationReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#channels:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channels: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "channels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#duration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#keyframes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyframes: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "keyframes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#samplers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "samplers: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "samplers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectAnimationReport#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectMaterialReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectMaterialReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectMaterialReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMaterialReport#alphaMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaMode: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MaterialAlphaMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "alphaMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMaterialReport#doubleSided:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doubleSided: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "doubleSided",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMaterialReport#instances:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "instances: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "instances",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMaterialReport#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMaterialReport#textures:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textures: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectMeshReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectMeshReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectMeshReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#attributes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attributes: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#glPrimitives:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "glPrimitives: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "glPrimitives",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#indices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indices: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "indices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#instances:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "instances: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "instances",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#primitives:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primitives: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "primitives",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectMeshReport#vertices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertices: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "vertices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectPropertyReport<T> "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "InspectPropertyReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectPropertyReport#errors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errors?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "errors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectPropertyReport#properties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "properties: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectPropertyReport#warnings:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warnings?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "warnings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectReport#animations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animations: "
                },
                {
                  "kind": "Reference",
                  "text": "InspectPropertyReport",
                  "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InspectAnimationReport",
                  "canonicalReference": "@gltf-transform/functions!InspectAnimationReport:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "animations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectReport#materials:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "materials: "
                },
                {
                  "kind": "Reference",
                  "text": "InspectPropertyReport",
                  "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InspectMaterialReport",
                  "canonicalReference": "@gltf-transform/functions!InspectMaterialReport:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "materials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectReport#meshes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meshes: "
                },
                {
                  "kind": "Reference",
                  "text": "InspectPropertyReport",
                  "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InspectMeshReport",
                  "canonicalReference": "@gltf-transform/functions!InspectMeshReport:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "meshes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectReport#scenes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scenes: "
                },
                {
                  "kind": "Reference",
                  "text": "InspectPropertyReport",
                  "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InspectSceneReport",
                  "canonicalReference": "@gltf-transform/functions!InspectSceneReport:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scenes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectReport#textures:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textures: "
                },
                {
                  "kind": "Reference",
                  "text": "InspectPropertyReport",
                  "canonicalReference": "@gltf-transform/functions!InspectPropertyReport:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InspectTextureReport",
                  "canonicalReference": "@gltf-transform/functions!InspectTextureReport:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectSceneReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectSceneReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectSceneReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectSceneReport#bboxMax:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bboxMax: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bboxMax",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectSceneReport#bboxMin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bboxMin: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bboxMin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectSceneReport#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectSceneReport#rootName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rootName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InspectTextureReport:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InspectTextureReport "
            }
          ],
          "fileUrlPath": "dist/inspect.d.ts",
          "releaseTag": "Public",
          "name": "InspectTextureReport",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#gpuSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gpuSize: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gpuSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#instances:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "instances: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "instances",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#mimeType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mimeType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#resolution:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolution: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#slots:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slots: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "slots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!InspectTextureReport#uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!instance:function(1)",
          "docComment": "/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No options are currently implemented for this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function instance(_options?: "
            },
            {
              "kind": "Reference",
              "text": "InstanceOptions",
              "canonicalReference": "@gltf-transform/functions!InstanceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/instance.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "instance"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!InstanceOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InstanceOptions "
            }
          ],
          "fileUrlPath": "dist/instance.d.ts",
          "releaseTag": "Public",
          "name": "InstanceOptions",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!listTextureChannels:function(1)",
          "docComment": "/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given texture. Determination is based only on the _role_ of the textures, e.g. a texture used for the `occlusionTexture` will have (at least) a red channel in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js const channels = listTextureChannels(document, texture); if (channels.includes(TextureChannel.R)) { console.log('texture red channel used'); }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function listTextureChannels(document: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": ", texture: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@gltf-transform/core!Texture:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TextureChannel",
              "canonicalReference": "@gltf-transform/core!TextureChannel:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/list-texture-channels.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "texture",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "listTextureChannels"
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!listTextureInfo:function(1)",
          "docComment": "/**\n * Lists all {@link TextureInfo} definitions associated with a given {@link Texture}.\n *\n * Example:\n * ```js\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(document, texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 0, 1]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function listTextureInfo(document: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": ", texture: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@gltf-transform/core!Texture:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TextureInfo",
              "canonicalReference": "@gltf-transform/core!TextureInfo:class"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/list-texture-info.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "texture",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "listTextureInfo"
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!listTextureSlots:function(1)",
          "docComment": "/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n * ```js\n * const slots = listTextureSlots(document, texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function listTextureSlots(doc: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": ", texture: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@gltf-transform/core!Texture:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/list-texture-slots.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "texture",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "listTextureSlots"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!MESHOPT_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MESHOPT_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MeshoptOptions",
              "canonicalReference": "@gltf-transform/functions!MeshoptOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", 'encoder'>>"
            }
          ],
          "fileUrlPath": "dist/meshopt.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MESHOPT_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!meshopt:var",
          "docComment": "/**\n * Applies Meshopt compression using {@link MeshoptCompression EXT_meshopt_compression}. This type of compression can reduce the size of point, line, and triangle geometry, morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and {@link MeshoptCompression}, and exposes relatively few configuration options. To access more options (like quantization bits) direct use of the underlying functions is recommended.\n *\n * Example:\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "meshopt: "
            },
            {
              "kind": "Content",
              "text": "(_options: "
            },
            {
              "kind": "Reference",
              "text": "MeshoptOptions",
              "canonicalReference": "@gltf-transform/functions!MeshoptOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/meshopt.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "meshopt",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!MeshoptOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MeshoptOptions "
            }
          ],
          "fileUrlPath": "dist/meshopt.d.ts",
          "releaseTag": "Public",
          "name": "MeshoptOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!MeshoptOptions#encoder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoder: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "MeshoptEncoder",
                  "canonicalReference": "meshoptimizer!MeshoptEncoder:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encoder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!MeshoptOptions#level:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "level?: "
                },
                {
                  "kind": "Content",
                  "text": "'medium' | 'high'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!metalRough:function(1)",
          "docComment": "/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow, removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases, and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function metalRough(_options?: "
            },
            {
              "kind": "Reference",
              "text": "MetalRoughOptions",
              "canonicalReference": "@gltf-transform/functions!MetalRoughOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/metal-rough.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "metalRough"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!MetalRoughOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MetalRoughOptions "
            }
          ],
          "fileUrlPath": "dist/metal-rough.d.ts",
          "releaseTag": "Public",
          "name": "MetalRoughOptions",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!mozjpeg:var",
          "docComment": "/**\n * Optimizes JPEG images by default, optionally converting PNG textures to JPEG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js environments. Support for encoding in web browsers may be available pending [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { mozjpeg } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tmozjpeg({ squoosh, jobs: cpus().length })\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mozjpeg: "
            },
            {
              "kind": "Content",
              "text": "(options: "
            },
            {
              "kind": "Reference",
              "text": "SquooshOptions",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/squoosh.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "mozjpeg",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!normals:function(1)",
          "docComment": "/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function normals(_options?: "
            },
            {
              "kind": "Reference",
              "text": "NormalsOptions",
              "canonicalReference": "@gltf-transform/functions!NormalsOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/normals.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "normals"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!NormalsOptions:interface",
          "docComment": "/**\n * Options for the {@link normals} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NormalsOptions "
            }
          ],
          "fileUrlPath": "dist/normals.d.ts",
          "releaseTag": "Public",
          "name": "NormalsOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!NormalsOptions#overwrite:member",
              "docComment": "/**\n * Whether to overwrite existing `NORMAL` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overwrite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overwrite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!oxipng:var",
          "docComment": "/**\n * Optimizes PNG images by default, optionally converting JPEG textures to PNG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js environments. Support for encoding in web browsers may be available pending [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { oxipng } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \toxipng({ squoosh, jobs: cpus().length })\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "oxipng: "
            },
            {
              "kind": "Content",
              "text": "(options: "
            },
            {
              "kind": "Reference",
              "text": "SquooshOptions",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/squoosh.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "oxipng",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!partition:var",
          "docComment": "/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading specific binary resources as needed over the application lifecycle.\n *\n * Example:\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "partition: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "PartitionOptions",
              "canonicalReference": "@gltf-transform/functions!PartitionOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/partition.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "partition",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!PartitionOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PartitionOptions "
            }
          ],
          "fileUrlPath": "dist/partition.d.ts",
          "releaseTag": "Public",
          "name": "PartitionOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!PartitionOptions#animations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animations?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!PartitionOptions#meshes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meshes?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "meshes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!prune:var",
          "docComment": "/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful for cleaning up after other operations, e.g. allowing a node to be detached and any unused meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "prune: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "PruneOptions",
              "canonicalReference": "@gltf-transform/functions!PruneOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/prune.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "prune",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!PruneOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PruneOptions "
            }
          ],
          "fileUrlPath": "dist/prune.d.ts",
          "releaseTag": "Public",
          "name": "PruneOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!PruneOptions#keepLeaves:member",
              "docComment": "/**\n * Whether to keep empty leaf nodes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keepLeaves?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keepLeaves",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!PruneOptions#propertyTypes:member",
              "docComment": "/**\n * List of {@link PropertyType} identifiers to be de-duplicated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyTypes?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "propertyTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!QUANTIZE_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "QUANTIZE_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "QuantizeOptions",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "dist/quantize.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "QUANTIZE_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!quantize:var",
          "docComment": "/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint of the file.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "quantize: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "QuantizeOptions",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/quantize.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "quantize",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!QuantizeOptions:interface",
          "docComment": "/**\n * Options for the {@link quantize} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuantizeOptions "
            }
          ],
          "fileUrlPath": "dist/quantize.d.ts",
          "releaseTag": "Public",
          "name": "QuantizeOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#normalizeWeights:member",
              "docComment": "/**\n * Normalize weight attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizeWeights?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "normalizeWeights",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#pattern:member",
              "docComment": "/**\n * Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizationVolume:member",
              "docComment": "/**\n * Bounds for quantization grid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizationVolume?: "
                },
                {
                  "kind": "Content",
                  "text": "'mesh' | 'scene'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizationVolume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizeColor:member",
              "docComment": "/**\n * Quantization bits for `COLOR_*` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeColor?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizeGeneric:member",
              "docComment": "/**\n * Quantization bits for application-specific (`_*`) attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeGeneric?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizeNormal:member",
              "docComment": "/**\n * Quantization bits for `NORMAL` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeNormal?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeNormal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizePosition:member",
              "docComment": "/**\n * Quantization bits for `POSITION` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizePosition?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizePosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizeTexcoord:member",
              "docComment": "/**\n * Quantization bits for `TEXCOORD_*` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeTexcoord?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeTexcoord",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!QuantizeOptions#quantizeWeight:member",
              "docComment": "/**\n * Quantization bits for `WEIGHT_*` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quantizeWeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quantizeWeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!reorder:function(1)",
          "docComment": "/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether the order should be optimal for transmission size (recommended for Web) or for GPU rendering performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reorder(_options: "
            },
            {
              "kind": "Reference",
              "text": "ReorderOptions",
              "canonicalReference": "@gltf-transform/functions!ReorderOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/reorder.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "reorder"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!ReorderOptions:interface",
          "docComment": "/**\n * Options for the {@link reorder} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReorderOptions "
            }
          ],
          "fileUrlPath": "dist/reorder.d.ts",
          "releaseTag": "Public",
          "name": "ReorderOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!ReorderOptions#encoder:member",
              "docComment": "/**\n * MeshoptEncoder instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoder: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "MeshoptEncoder",
                  "canonicalReference": "meshoptimizer!MeshoptEncoder:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encoder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!ReorderOptions#target:member",
              "docComment": "/**\n * Whether the order should be optimal for transmission size (recommended for Web) or for GPU rendering performance. Default is 'size'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Content",
                  "text": "'size' | 'performance'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!resample:var",
          "docComment": "/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate keyframes are commonly present in animation 'baked' by the authoring software to apply IK constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "resample: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "ResampleOptions",
              "canonicalReference": "@gltf-transform/functions!ResampleOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/resample.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "resample",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!ResampleOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ResampleOptions "
            }
          ],
          "fileUrlPath": "dist/resample.d.ts",
          "releaseTag": "Public",
          "name": "ResampleOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!ResampleOptions#tolerance:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tolerance?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tolerance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!sequence:function(1)",
          "docComment": "/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sequence(_options?: "
            },
            {
              "kind": "Reference",
              "text": "SequenceOptions",
              "canonicalReference": "@gltf-transform/functions!SequenceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/sequence.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "sequence"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!SequenceOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SequenceOptions "
            }
          ],
          "fileUrlPath": "dist/sequence.d.ts",
          "releaseTag": "Public",
          "name": "SequenceOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SequenceOptions#fps:member",
              "docComment": "/**\n * Frames per second, where one node is shown each frame. Default 10.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fps?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SequenceOptions#name:member",
              "docComment": "/**\n * Name of the new animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SequenceOptions#pattern:member",
              "docComment": "/**\n * Pattern (regex) used to filter nodes for the sequence. Required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SequenceOptions#sort:member",
              "docComment": "/**\n * Whether to sort the nodes by name, or use original order. Default true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sort?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sort",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!SIMPLIFY_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SIMPLIFY_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SimplifyOptions",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", 'simplifier'>>"
            }
          ],
          "fileUrlPath": "dist/simplify.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SIMPLIFY_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!simplify:var",
          "docComment": "/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer triangles and vertices. Simplification is lossy, but the algorithm aims to preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If error exceeds the specified 'error' threshold, the algorithm will quit before reaching the target ratio. Examples:\n *\n * - ratio=0.5, error=0.001: Aims for 50% simplification, constrained to 0.1% error. - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error. - ratio=0.0, error=0.01: Aims for maximum simplification, constrained to 1% error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References: - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "simplify: "
            },
            {
              "kind": "Content",
              "text": "(_options: "
            },
            {
              "kind": "Reference",
              "text": "SimplifyOptions",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/simplify.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "simplify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!SimplifyOptions:interface",
          "docComment": "/**\n * Options for the {@link simplify} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SimplifyOptions "
            }
          ],
          "fileUrlPath": "dist/simplify.d.ts",
          "releaseTag": "Public",
          "name": "SimplifyOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions#error:member",
              "docComment": "/**\n * Limit on error, as a fraction of mesh radius. Default: 0.01 (1%).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions#lockBorder:member",
              "docComment": "/**\n * Whether to lock topological borders of the mesh. May be necessary when adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping to ensure no seams appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lockBorder?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lockBorder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions#ratio:member",
              "docComment": "/**\n * Target ratio (0–1) of vertices to keep. Default: 0.5 (50%).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ratio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions#simplifier:member",
              "docComment": "/**\n * MeshoptSimplifier instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "simplifier: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "MeshoptSimplifier",
                  "canonicalReference": "meshoptimizer!MeshoptSimplifier:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "simplifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!simplifyPrimitive:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function simplifyPrimitive(document: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document:class"
            },
            {
              "kind": "Content",
              "text": ", prim: "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@gltf-transform/core!Primitive:class"
            },
            {
              "kind": "Content",
              "text": ", _options: "
            },
            {
              "kind": "Reference",
              "text": "SimplifyOptions",
              "canonicalReference": "@gltf-transform/functions!SimplifyOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@gltf-transform/core!Primitive:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/simplify.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "prim",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "simplifyPrimitive"
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!sortPrimitiveWeights:function(1)",
          "docComment": "/**\n * Sorts skinning weights from high to low, for each vertex of the input {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights. Optionally, uses the given 'limit' to remove least-significant joint influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex, often 4 or 8. Sorting and removing the additional influences can reduce file size and improve compatibility.\n *\n * Example:\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim - Input, to be modified in place.\n *\n * @param limit - Maximum number of joint influences per vertex. Must be a multiple of four.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sortPrimitiveWeights(prim: "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@gltf-transform/core!Primitive:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PrimitiveTarget",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class"
            },
            {
              "kind": "Content",
              "text": ", limit?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/sort-primitive-weights.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "prim",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "limit",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "sortPrimitiveWeights"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!SquooshOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SquooshOptions "
            }
          ],
          "fileUrlPath": "dist/squoosh.d.ts",
          "releaseTag": "Public",
          "name": "SquooshOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions#auto:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "auto?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "auto",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions#formats:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formats?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "formats",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions#jobs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jobs?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "jobs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions#slots:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slots?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "slots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions#squoosh:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "squoosh: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "squoosh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!tangents:function(1)",
          "docComment": "/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) WASM package, or equivalent.\n *\n * Example:\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tangents(_options?: "
            },
            {
              "kind": "Reference",
              "text": "TangentsOptions",
              "canonicalReference": "@gltf-transform/functions!TangentsOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/tangents.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "tangents"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!TangentsOptions:interface",
          "docComment": "/**\n * Options for the {@link tangents} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TangentsOptions "
            }
          ],
          "fileUrlPath": "dist/tangents.d.ts",
          "releaseTag": "Public",
          "name": "TangentsOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TangentsOptions#generateTangents:member",
              "docComment": "/**\n * Callback function to generate tangents from position, uv, and normal attributes. Generally, users will want to provide the `generateTangents` from the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not included by default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateTangents?: "
                },
                {
                  "kind": "Content",
                  "text": "(pos: "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", norm: "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", uv: "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "generateTangents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TangentsOptions#overwrite:member",
              "docComment": "/**\n * Whether to overwrite existing `TANGENT` attributes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overwrite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overwrite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!TEXTURE_RESIZE_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TEXTURE_RESIZE_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "TextureResizeOptions",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions:interface"
            }
          ],
          "fileUrlPath": "dist/texture-resize.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TEXTURE_RESIZE_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!textureResize:function(1)",
          "docComment": "/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}. Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function textureResize(_options?: "
            },
            {
              "kind": "Reference",
              "text": "TextureResizeOptions",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/texture-resize.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "textureResize"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/functions!TextureResizeFilter:enum",
          "docComment": "/**\n * Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TextureResizeFilter "
            }
          ],
          "fileUrlPath": "dist/texture-resize.d.ts",
          "releaseTag": "Public",
          "name": "TextureResizeFilter",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/functions!TextureResizeFilter.LANCZOS3:member",
              "docComment": "/**\n * Lanczos3 (sharp)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LANCZOS3 = "
                },
                {
                  "kind": "Content",
                  "text": "\"lanczos3\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LANCZOS3"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/functions!TextureResizeFilter.LANCZOS2:member",
              "docComment": "/**\n * Lanczos2 (smooth)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LANCZOS2 = "
                },
                {
                  "kind": "Content",
                  "text": "\"lanczos2\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LANCZOS2"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!TextureResizeOptions:interface",
          "docComment": "/**\n * Options for the {@link textureResize} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextureResizeOptions "
            }
          ],
          "fileUrlPath": "dist/texture-resize.d.ts",
          "releaseTag": "Public",
          "name": "TextureResizeOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions#filter:member",
              "docComment": "/**\n * Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureResizeFilter",
                  "canonicalReference": "@gltf-transform/functions!TextureResizeFilter:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions#pattern:member",
              "docComment": "/**\n * Pattern identifying textures to resize, matched to name or URI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions#size:member",
              "docComment": "/**\n * Maximum width/height to enforce, preserving aspect ratio. For example, a 4096x8192 texture, resized with limit [2048, 2048] will be reduced to 1024x2048.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Reference",
                  "text": "vec2",
                  "canonicalReference": "@gltf-transform/core!vec2:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!TextureResizeOptions#slots:member",
              "docComment": "/**\n * Pattern to match slots usage for resizing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slots?: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "slots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!transformMesh:function(1)",
          "docComment": "/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method: - If any primitives are shared by other meshes, they will be detached. - If any vertex streams are shared by primitives of other meshes, vertex data will be overwritten unless _overwrite=false_ or the indices are masked. If _overwrite=false_, a detached copy of the vertex stream is made before applying the transform. - Primitives within the mesh sharing vertex streams will continue to share those streams. - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh - \n *\n * @param matrix - \n *\n * @param overwrite - Whether to overwrite vertex streams in place. If false, streams shared with other meshes will be detached.\n *\n * @param skipIndices - Vertices, specified by index, to be _excluded_ from the transformation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function transformMesh(mesh: "
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "@gltf-transform/core!Mesh:class"
            },
            {
              "kind": "Content",
              "text": ", matrix: "
            },
            {
              "kind": "Reference",
              "text": "mat4",
              "canonicalReference": "@gltf-transform/core!mat4:type"
            },
            {
              "kind": "Content",
              "text": ", overwrite?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", skipIndices?: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/transform-mesh.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mesh",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "matrix",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "overwrite",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "skipIndices",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            }
          ],
          "name": "transformMesh"
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!transformPrimitive:function(1)",
          "docComment": "/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten directly in the underlying vertex streams. If streams should be detached instead, see {@link transformMesh}.\n *\n * Example:\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim - \n *\n * @param matrix - \n *\n * @param skipIndices - Vertices, specified by index, to be _excluded_ from the transformation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function transformPrimitive(prim: "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@gltf-transform/core!Primitive:class"
            },
            {
              "kind": "Content",
              "text": ", matrix: "
            },
            {
              "kind": "Reference",
              "text": "mat4",
              "canonicalReference": "@gltf-transform/core!mat4:type"
            },
            {
              "kind": "Content",
              "text": ", skipIndices?: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/transform-mesh.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "prim",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "matrix",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "skipIndices",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "transformPrimitive"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!unlit:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "unlit: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/unlit.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "unlit",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!unpartition:var",
          "docComment": "/**\n * Removes partitions from the binary payload of a glTF file, so that the asset contains at most one (1) `.bin` {@link Buffer}. This process reverses the changes from a {@link partition} transform.\n *\n * Example:\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "unpartition: "
            },
            {
              "kind": "Content",
              "text": "(_options?: "
            },
            {
              "kind": "Reference",
              "text": "UnpartitionOptions",
              "canonicalReference": "@gltf-transform/functions!UnpartitionOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/unpartition.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "unpartition",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!UnpartitionOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UnpartitionOptions "
            }
          ],
          "fileUrlPath": "dist/unpartition.d.ts",
          "releaseTag": "Public",
          "name": "UnpartitionOptions",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!unweld:function(1)",
          "docComment": "/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally increase the number of vertices in a mesh, but may be helpful for some geometry operations or for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unweld(_options?: "
            },
            {
              "kind": "Reference",
              "text": "UnweldOptions",
              "canonicalReference": "@gltf-transform/functions!UnweldOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/unweld.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "unweld"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!UnweldOptions:interface",
          "docComment": "/**\n * Options for the {@link unweld} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UnweldOptions "
            }
          ],
          "fileUrlPath": "dist/unweld.d.ts",
          "releaseTag": "Public",
          "name": "UnweldOptions",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!webp:var",
          "docComment": "/**\n * Converts images to WebP, using the {@link TextureWebP} extension.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js environments. Support for encoding in web browsers may be available pending [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { webp } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \twebp({ squoosh, jobs: cpus().length })\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "webp: "
            },
            {
              "kind": "Content",
              "text": "(options: "
            },
            {
              "kind": "Reference",
              "text": "SquooshOptions",
              "canonicalReference": "@gltf-transform/functions!SquooshOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            }
          ],
          "fileUrlPath": "dist/squoosh.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "webp",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/functions!WELD_DEFAULTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "WELD_DEFAULTS: "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WeldOptions",
              "canonicalReference": "@gltf-transform/functions!WeldOptions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "dist/weld.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "WELD_DEFAULTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/functions!weld:function(1)",
          "docComment": "/**\n * Index {@link Primitive}s and (optionally) merge similar vertices. When merged and indexed, data is shared more efficiently between vertices. File size can be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for welding based on distance between the vertices as a fraction of the primitive's bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1% of the AABB's longest dimension. Other vertex attributes are also compared during welding, with attribute-specific thresholds. For --tolerance=0, geometry is indexed in place, without merging.\n *\n * Example:\n * ```js\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001 })\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function weld(_options?: "
            },
            {
              "kind": "Reference",
              "text": "WeldOptions",
              "canonicalReference": "@gltf-transform/functions!WeldOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Transform",
              "canonicalReference": "@gltf-transform/core!Transform:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/weld.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "weld"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/functions!WeldOptions:interface",
          "docComment": "/**\n * Options for the {@link weld} function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WeldOptions "
            }
          ],
          "fileUrlPath": "dist/weld.d.ts",
          "releaseTag": "Public",
          "name": "WeldOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!WeldOptions#overwrite:member",
              "docComment": "/**\n * Whether to overwrite existing indices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overwrite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overwrite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/functions!WeldOptions#tolerance:member",
              "docComment": "/**\n * Tolerance, as a fraction of primitive AABB, used when merging similar vertices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tolerance?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tolerance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
