{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.6",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "http://github.com/donmccurdy/glTF-Transform/tree/main/packages/core",
  "kind": "Package",
  "canonicalReference": "@gltf-transform/core!",
  "docComment": "",
  "name": "@gltf-transform/core",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@gltf-transform/core!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Accessor:class",
          "docComment": "/**\n * # Accessor\n *\n * *Accessors store lists of numeric, vector, or matrix elements in a typed array.*\n *\n * All large data for {@link Mesh}, {@link Skin}, and {@link Animation} properties is stored in {@link Accessor}s, organized into one or more {@link Buffer}s. Each accessor provides data in typed arrays, with two abstractions:\n *\n * *Elements* are the logical divisions of the data into useful types: `\"SCALAR\"`, `\"VEC2\"`, `\"VEC3\"`, `\"VEC4\"`, `\"MAT3\"`, or `\"MAT4\"`. The element type can be determined with the {@link getType}() method, and the number of elements in the accessor determine its {@link getCount}(). The number of components in an element — e.g. 9 for `\"MAT3\"` — are its {@link getElementSize}(). See {@link Accessor.Type}.\n *\n * *Components* are the numeric values within an element — e.g. `.x` and `.y` for `\"VEC2\"`. Various component types are available: `BYTE`, `UNSIGNED_BYTE`, `SHORT`, `UNSIGNED_SHORT`, `UNSIGNED_INT`, and `FLOAT`. The component type can be determined with the {@link getComponentType} method, and the number of bytes in each component determine its {@link getComponentSize}. See {@link Accessor.ComponentType}.\n *\n * Usage:\n * ```typescript\n * const accessor = doc.createAccessor('myData')\n * \t.setArray(new Float32Array([1,2,3,4,5,6,7,8,9,10,11,12]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(doc.listBuffers()[0]);\n *\n * accessor.getCount();        // → 4\n * accessor.getElementSize();  // → 3\n * accessor.getByteLength();   // → 48\n * accessor.getElement(1, []); // → [4, 5, 6]\n *\n * accessor.setElement(0, [10, 20, 30]);\n * ```\n *\n * Data access through the {@link getElement} and {@link setElement} methods reads or overwrites the content of the underlying typed array. These methods use element arrays intended to be compatible with the [gl-matrix](https://github.com/toji/gl-matrix) library, or with the `toArray`/`fromArray` methods of libraries like three.js and babylon.js.\n *\n * Each Accessor must be assigned to a {@link Buffer}, which determines where the accessor's data is stored in the final file. Assigning Accessors to different Buffers allows the data to be written to different `.bin` files.\n *\n * glTF-Transform does not expose many details of sparse, normalized, or interleaved accessors through its API. It reads files using those techniques, presents a simplified view of the data for editing, and attempts to write data back out with optimizations. For example, vertex attributes will typically be interleaved by default, regardless of the input file.\n *\n * References: - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Accessor extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAccessor",
              "canonicalReference": "@gltf-transform/core!~IAccessor:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/accessor.d.ts",
          "releaseTag": "Public",
          "name": "Accessor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Accessor.ComponentType:member",
              "docComment": "/**\n * Data type of the values composing each element in the accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ComponentType: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorComponentType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ComponentType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#copy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", resolve?: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>(t: T) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resolve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getArray:member(1)",
              "docComment": "/**\n * Returns the raw typed array underlying this accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getArray(): "
                },
                {
                  "kind": "Reference",
                  "text": "TypedArray",
                  "canonicalReference": "@gltf-transform/core!TypedArray:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getBuffer:member(1)",
              "docComment": "/**\n * Returns the {@link Buffer} into which this accessor will be organized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBuffer(): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getByteLength:member(1)",
              "docComment": "/**\n * Returns the total bytelength of this accessor, exclusive of padding.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getByteLength(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getByteLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getComponentSize:member(1)",
              "docComment": "/**\n * Size of each component (a value in the raw array), in bytes. For example, the `componentSize` of data backed by a `float32` array is 4 bytes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getComponentSize(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getComponentSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor.getComponentSize:member(1)",
              "docComment": "/**\n * Returns size of a given component type, in bytes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getComponentSize(componentType: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorComponentType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "componentType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getComponentSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getComponentType:member(1)",
              "docComment": "/**\n * Component type (float32, uint16, etc.). This value is determined automatically, and can only be modified by replacing the underlying array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getComponentType(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorComponentType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getComponentType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getCount:member(1)",
              "docComment": "/**\n * Number of elements in the accessor. An array of length 30, containing 10 `VEC3` elements, will have a count of 10.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAccessor",
                  "canonicalReference": "@gltf-transform/core!~IAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getElement:member(1)",
              "docComment": "/**\n * Returns the vector or matrix element value at the given index, accounting for normalization if applicable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getElement(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getElementSize:member(1)",
              "docComment": "/**\n * Number of components in each element of the accessor. For example, the element size of a `VEC2` accessor is 2. This value is determined automatically based on array length and accessor type, specified with {@link setType}().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getElementSize(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getElementSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor.getElementSize:member(1)",
              "docComment": "/**\n * Returns size of a given element type, in components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getElementSize(type: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getElementSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getMax:member(1)",
              "docComment": "/**\n * Maximum value of each component in this attribute. Values returned by this method do not reflect normalization: use {@link .getMinNormalized} in that case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMax(target: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMax"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getMaxNormalized:member(1)",
              "docComment": "/**\n * Maximum value of each component in this attribute. Unlike in a final glTF file, values returned by this method will reflect the minimum accounting for {@link .normalized} state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMaxNormalized(target: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMaxNormalized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getMin:member(1)",
              "docComment": "/**\n * Minimum value of each component in this attribute. Values returned by this method do not reflect normalization: use {@link .getMinNormalized} in that case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMin(target: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMin"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getMinNormalized:member(1)",
              "docComment": "/**\n * Minimum value of each component in this attribute. Unlike in a final glTF file, values returned by this method will reflect the minimum accounting for {@link .normalized} state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMinNormalized(target: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMinNormalized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getNormalized:member(1)",
              "docComment": "/**\n * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed. This property is defined only for accessors that contain vertex attributes or animation output data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormalized(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getNormalized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getScalar:member(1)",
              "docComment": "/**\n * Returns the scalar element value at the given index, accounting for normalization if applicable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScalar(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getScalar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#getType:member(1)",
              "docComment": "/**\n * Type of element stored in the accessor. `VEC2`, `VEC3`, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getType(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Accessor#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.ACCESSOR",
                  "canonicalReference": "@gltf-transform/core!PropertyType.ACCESSOR:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setArray:member(1)",
              "docComment": "/**\n * Assigns the raw typed array underlying this accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "TypedArray",
                  "canonicalReference": "@gltf-transform/core!TypedArray:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setBuffer:member(1)",
              "docComment": "/**\n * Assigns the {@link Buffer} into which this accessor will be organized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBuffer(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setElement:member(1)",
              "docComment": "/**\n * Assigns the vector or matrix element value at the given index, accounting for normalization if applicable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setElement(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setNormalized:member(1)",
              "docComment": "/**\n * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed. This property is defined only for accessors that contain vertex attributes or animation output data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNormalized(normalized: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "normalized",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setNormalized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setScalar:member(1)",
              "docComment": "/**\n * Assigns the scalar element value at the given index, accounting for normalization if applicable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setScalar(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setScalar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Accessor#setType:member(1)",
              "docComment": "/**\n * Sets type of element stored in the accessor. `VEC2`, `VEC3`, etc. Array length must be a multiple of the component size (`VEC2` = 2, `VEC3` = 3, ...) for the selected type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setType(type: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setType"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Accessor.Type:member",
              "docComment": "/**\n * Element type contained by the accessor (SCALAR, VEC2, ...).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Type: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Animation_2:class",
          "docComment": "/**\n * # Animation\n *\n * *Reusable collections of {@link AnimationChannel}s, together representing a discrete animation clip.*\n *\n * One Animation represents one playable unit in an animation system. Each may contain channels affecting multiple paths (`translation`, `rotation`, `scale`, or `weights`) on multiple {@link Node}s. An Animation's channels must be played together, and do not have any meaning in isolation.\n *\n * Multiple Animations _may_ be played together: for example, one character's _Walk_ animation might play while another character's _Run_ animation plays. Or a single character might have both an _Idle_ and a _Talk_ animation playing at the same time. However, glTF does not define any particular relationship between top-level Animations, or any particular playback behavior like looping or sequences of Animations. General-purpose viewers typically autoplay the first animation and provide UI controls for choosing another. Game engines may have significantly more advanced methods of playing and blending animations.\n *\n * For example, a very simple skinned {@link Mesh} might have two Animations, _Idle_ and _Walk_. Each of those Animations might affect the rotations of two bones, _LegL_ and _LegR_, where the keyframes for each target-path pair are stored in {@link AnimationChannel} instances. In total, this model would contain two Animations and Four {@link AnimationChannel}s.\n *\n * Usage:\n * ```ts\n * const animation = doc.createAnimation('machineRun')\n * \t.addChannel(rotateCog1)\n * \t.addChannel(rotateCog2)\n * \t.addChannel(rotateCog3);\n * ```\n *\n * Reference - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Animation extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnimation",
              "canonicalReference": "@gltf-transform/core!~IAnimation:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/animation.d.ts",
          "releaseTag": "Public",
          "name": "Animation_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#addChannel:member(1)",
              "docComment": "/**\n * Adds an {@link AnimationChannel} to this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChannel(channel: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationChannel",
                  "canonicalReference": "@gltf-transform/core!AnimationChannel:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addChannel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#addSampler:member(1)",
              "docComment": "/**\n * Adds an {@link AnimationSampler} to this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSampler(sampler: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sampler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addSampler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAnimation",
                  "canonicalReference": "@gltf-transform/core!~IAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#listChannels:member(1)",
              "docComment": "/**\n * Lists {@link AnimationChannel}s in this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listChannels(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationChannel",
                  "canonicalReference": "@gltf-transform/core!AnimationChannel:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listChannels"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#listSamplers:member(1)",
              "docComment": "/**\n * Lists {@link AnimationSampler}s in this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listSamplers(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listSamplers"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Animation_2#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.ANIMATION",
                  "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#removeChannel:member(1)",
              "docComment": "/**\n * Removes an {@link AnimationChannel} from this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeChannel(channel: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationChannel",
                  "canonicalReference": "@gltf-transform/core!AnimationChannel:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeChannel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Animation_2#removeSampler:member(1)",
              "docComment": "/**\n * Removes an {@link AnimationSampler} from this Animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSampler(sampler: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sampler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeSampler"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!AnimationChannel:class",
          "docComment": "/**\n * # AnimationChannel\n *\n * *A target-path pair within a larger {@link Animation}, which refers to an {@link AnimationSampler} storing the keyframe data for that pair.*\n *\n * A _target_ is always a {@link Node}, in the core glTF spec. A _path_ is any property of that Node that can be affected by animation: `translation`, `rotation`, `scale`, or `weights`. An {@link Animation} affecting the positions and rotations of several {@link Node}s would contain one channel for each Node-position or Node-rotation pair. The keyframe data for an AnimationChannel is stored in an {@link AnimationSampler}, which must be attached to the same {@link Animation}.\n *\n * Usage:\n * ```ts\n * const node = doc.getRoot()\n * \t.listNodes()\n * \t.find((node) => node.getName() === 'Cog');\n *\n * const channel = doc.createAnimationChannel('cogRotation')\n * \t.setTargetPath('rotation')\n * \t.setTargetNode(node)\n * \t.setSampler(rotateSampler);\n * ```\n *\n * Reference - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnimationChannel extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnimationChannel",
              "canonicalReference": "@gltf-transform/core!~IAnimationChannel:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/animation-channel.d.ts",
          "releaseTag": "Public",
          "name": "AnimationChannel",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAnimationChannel",
                  "canonicalReference": "@gltf-transform/core!~IAnimationChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#getSampler:member(1)",
              "docComment": "/**\n * Keyframe data input/output values for the channel. Must be attached to the same {@link Animation}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSampler(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getSampler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#getTargetNode:member(1)",
              "docComment": "/**\n * Target {@link Node} animated by the channel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTargetNode(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getTargetNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#getTargetPath:member(1)",
              "docComment": "/**\n * Path (property) animated on the target {@link Node}. Supported values include: `translation`, `rotation`, `scale`, or `weights`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTargetPath(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationChannelTargetPath",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationChannelTargetPath:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getTargetPath"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.ANIMATION_CHANNEL",
                  "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION_CHANNEL:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#setSampler:member(1)",
              "docComment": "/**\n * Keyframe data input/output values for the channel. Must be attached to the same {@link Animation}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSampler(sampler: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sampler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setSampler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#setTargetNode:member(1)",
              "docComment": "/**\n * Target {@link Node} animated by the channel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTargetNode(targetNode: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetNode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setTargetNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationChannel#setTargetPath:member(1)",
              "docComment": "/**\n * Path (property) animated on the target {@link Node}. Supported values include: `translation`, `rotation`, `scale`, or `weights`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTargetPath(targetPath: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationChannelTargetPath",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationChannelTargetPath:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setTargetPath"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!AnimationChannel.TargetPath:member",
              "docComment": "/**\n * Name of the property to be modified by an animation channel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TargetPath: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationChannelTargetPath",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationChannelTargetPath:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "TargetPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!AnimationSampler:class",
          "docComment": "/**\n * # AnimationSampler\n *\n * *Reusable collection of keyframes affecting particular property of an object.*\n *\n * Each AnimationSampler refers to an input and an output {@link Accessor}. Input contains times (in seconds) for each keyframe. Output contains values (of any {@link Accessor.Type}) for the animated property at each keyframe. Samplers using `CUBICSPLINE` interpolation will also contain in/out tangents in the output, with the layout:\n *\n * in<sub>1</sub>, value<sub>1</sub>, out<sub>1</sub>, in<sub>2</sub>, value<sub>2</sub>, out<sub>2</sub>, in<sub>3</sub>, value<sub>3</sub>, out<sub>3</sub>, ...\n *\n * Usage:\n * ```ts\n * // Create accessor containing input times, in seconds.\n * const input = doc.createAccessor('bounceTimes')\n * \t.setArray(new Float32Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR);\n *\n * // Create accessor containing output values, in local units.\n * const output = doc.createAccessor('bounceValues')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0, // y = 0\n * \t\t0, 1, 0, // y = 1\n * \t\t0, 0, 0, // y = 0\n * \t]))\n * \t.setType(Accessor.Type.VEC3);\n *\n * // Create sampler.\n * const sampler = doc.createAnimationSampler('bounce')\n * \t.setInput(input)\n * \t.setOutput(output)\n * \t.setInterpolation('LINEAR');\n * ```\n *\n * Reference - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnimationSampler extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnimationSampler",
              "canonicalReference": "@gltf-transform/core!~IAnimationSampler:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/animation-sampler.d.ts",
          "releaseTag": "Public",
          "name": "AnimationSampler",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#getDefaultAttributes:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaultAttributes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAnimationSampler",
                  "canonicalReference": "@gltf-transform/core!~IAnimationSampler:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaultAttributes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#getInput:member(1)",
              "docComment": "/**\n * Times for each keyframe, in seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInput(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#getInterpolation:member(1)",
              "docComment": "/**\n * Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInterpolation(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationSamplerInterpolation",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationSamplerInterpolation:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getInterpolation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#getOutput:member(1)",
              "docComment": "/**\n * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out tangents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOutput(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getOutput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!AnimationSampler.Interpolation:member",
              "docComment": "/**\n * Interpolation method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Interpolation: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationSamplerInterpolation",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationSamplerInterpolation:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Interpolation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.ANIMATION_SAMPLER",
                  "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION_SAMPLER:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#setInput:member(1)",
              "docComment": "/**\n * Times for each keyframe, in seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInput(input: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#setInterpolation:member(1)",
              "docComment": "/**\n * Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInterpolation(interpolation: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AnimationSamplerInterpolation",
                  "canonicalReference": "@gltf-transform/core!GLTF.AnimationSamplerInterpolation:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interpolation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setInterpolation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!AnimationSampler#setOutput:member(1)",
              "docComment": "/**\n * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out tangents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOutput(output: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "output",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setOutput"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!bbox:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type bbox = "
            },
            {
              "kind": "Content",
              "text": "{\n    min: "
            },
            {
              "kind": "Reference",
              "text": "vec3",
              "canonicalReference": "@gltf-transform/core!vec3:type"
            },
            {
              "kind": "Content",
              "text": ";\n    max: "
            },
            {
              "kind": "Reference",
              "text": "vec3",
              "canonicalReference": "@gltf-transform/core!vec3:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "bbox",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@gltf-transform/core!bounds:function(1)",
          "docComment": "/**\n * Computes bounding box (AABB) in world space for the given {@link Node} or {@link Scene}.\n *\n * Example:\n * ```ts\n * const {min, max} = bounds(scene);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function bounds(node: "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "@gltf-transform/core!Node_2:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Scene",
              "canonicalReference": "@gltf-transform/core!Scene:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "bbox",
              "canonicalReference": "@gltf-transform/core!bbox:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils/bounds.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "node",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "bounds"
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Buffer_2:class",
          "docComment": "/**\n * # Buffer\n *\n * *Buffers are low-level storage units for binary data.*\n *\n * glTF 2.0 has three concepts relevant to binary storage: accessors, buffer views, and buffers. In glTF-Transform, an {@link Accessor} is referenced by any property that requires numeric typed array data. Meshes, Primitives, and Animations all reference Accessors. Buffers define how that data is organized into transmitted file(s). A `.glb` file has only a single Buffer, and when exporting to `.glb` your resources should be grouped accordingly. A `.gltf` file may reference one or more `.bin` files — each `.bin` is a Buffer — and grouping Accessors under different Buffers allow you to specify that structure.\n *\n * For engines that can dynamically load portions of a glTF file, splitting data into separate buffers can allow you to avoid loading data until it is needed. For example, you might put binary data for specific meshes into a different `.bin` buffer, or put each animation's binary payload into its own `.bin`.\n *\n * Buffer Views define how Accessors are organized within a given Buffer. glTF-Transform creates an efficient Buffer View layout automatically at export: there is no Buffer View property exposed by the glTF-Transform API, simplifying data management.\n *\n * Usage:\n * ```ts\n * // Create two buffers with custom filenames.\n * const buffer1 = doc.createBuffer('buffer1')\n * \t.setURI('part1.bin');\n * const buffer2 = doc.createBuffer('buffer2')\n * \t.setURI('part2.bin');\n *\n * // Assign the attributes of two meshes to different buffers. If the meshes\n * // had indices or morph target attributes, you would also want to relocate\n * // those accessors.\n * mesh1\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer1)));\n * mesh2\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer2)));\n *\n * // Write to disk. Each mesh's binary data will be in a separate binary file;\n * // any remaining accessors will be in a third (default) buffer.\n * await new NodeIO().write('scene.gltf', doc);\n * // → scene.gltf, part1.bin, part2.bin\n * ```\n *\n * References: - [glTF → Buffers and Buffer Views](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#buffers-and-buffer-views) - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Buffer extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IBuffer",
              "canonicalReference": "@gltf-transform/core!~IBuffer:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/buffer.d.ts",
          "releaseTag": "Public",
          "name": "Buffer_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Buffer_2#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBuffer",
                  "canonicalReference": "@gltf-transform/core!~IBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Buffer_2#getURI:member(1)",
              "docComment": "/**\n * Returns the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`) is possible for custom applications, but will limit the compatibility of the asset with most tools.\n *\n * Buffers commonly use the extension `.bin`, though this is not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getURI(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Buffer_2#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Buffer_2#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.BUFFER",
                  "canonicalReference": "@gltf-transform/core!PropertyType.BUFFER:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Buffer_2#setURI:member(1)",
              "docComment": "/**\n * Sets the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`) is possible for custom applications, but will limit the compatibility of the asset with most tools.\n *\n * Buffers commonly use the extension `.bin`, though this is not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setURI"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!BufferUtils:class",
          "docComment": "/**\n * # BufferUtils\n *\n * *Common utilities for working with Uint8Array and Buffer objects.*\n *\n * @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BufferUtils "
            }
          ],
          "fileUrlPath": "dist/utils/buffer-utils.d.ts",
          "releaseTag": "Public",
          "name": "BufferUtils",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.assertView:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static assertView(view: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "assertView"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.assertView:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static assertView(view: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "assertView"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.concat:member(1)",
              "docComment": "/**\n * Concatenates N byte arrays.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static concat(arrays: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "arrays",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "concat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.createBufferFromDataURI:member(1)",
              "docComment": "/**\n * Creates a byte array from a Data URI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createBufferFromDataURI(dataURI: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataURI",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createBufferFromDataURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.decodeText:member(1)",
              "docComment": "/**\n * Decodes a byte array to text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static decodeText(array: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "decodeText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.encodeText:member(1)",
              "docComment": "/**\n * Encodes text to a byte array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static encodeText(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "encodeText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.equals:member(1)",
              "docComment": "/**\n * Returns true if given byte array instances are equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static equals(a: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.pad:member(1)",
              "docComment": "/**\n * Pads a Uint8Array to the next 4-byte boundary.\n *\n * Reference: [glTF → Data Alignment](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static pad(srcArray: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", paddingByte?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "srcArray",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "paddingByte",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "pad"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.padNumber:member(1)",
              "docComment": "/**\n * Pads a number to 4-byte boundaries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static padNumber(v: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "padNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!BufferUtils.toView:member(1)",
              "docComment": "/**\n * Returns a Uint8Array view of a typed array, with the same underlying ArrayBuffer.\n *\n * A shorthand for:\n * ```js\n * const buffer = new Uint8Array(\n * \tarray.buffer,\n * \tarray.byteOffset + byteOffset,\n * \tMath.min(array.byteLength, byteLength)\n * );\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static toView(a: "
                },
                {
                  "kind": "Reference",
                  "text": "TypedArray",
                  "canonicalReference": "@gltf-transform/core!TypedArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", byteOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", byteLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "byteOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "byteLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "toView"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Camera:class",
          "docComment": "/**\n * # Camera\n *\n * *Cameras are perspectives through which the {@link Scene} may be viewed.*\n *\n * Projection can be perspective or orthographic. Cameras are contained in nodes and thus can be transformed. The camera is defined such that the local +X axis is to the right, the lens looks towards the local -Z axis, and the top of the camera is aligned with the local +Y axis. If no transformation is specified, the location of the camera is at the origin.\n *\n * Usage:\n * ```typescript\n * const camera = doc.createCamera('myCamera')\n * \t.setType(GLTF.CameraType.PERSPECTIVE)\n * \t.setZNear(0.1)\n * \t.setZFar(100)\n * \t.setYFov(Math.PI / 4)\n * \t.setAspectRatio(1.5);\n *\n * node.setCamera(camera);\n * ```\n *\n * References: - [glTF → Cameras](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#cameras)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Camera extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICamera",
              "canonicalReference": "@gltf-transform/core!~ICamera:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/camera.d.ts",
          "releaseTag": "Public",
          "name": "Camera",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getAspectRatio:member(1)",
              "docComment": "/**\n * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the canvas is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAspectRatio(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAspectRatio"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICamera",
                  "canonicalReference": "@gltf-transform/core!~ICamera:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getType:member(1)",
              "docComment": "/**\n * Specifies if the camera uses a perspective or orthographic projection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getType(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.CameraType",
                  "canonicalReference": "@gltf-transform/core!GLTF.CameraType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getXMag:member(1)",
              "docComment": "/**\n * Floating-point horizontal magnification of the view, and half the view's width in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getXMag(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getXMag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getYFov:member(1)",
              "docComment": "/**\n * Floating-point vertical field of view in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getYFov(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getYFov"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getYMag:member(1)",
              "docComment": "/**\n * Floating-point vertical magnification of the view, and half the view's height in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getYMag(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getYMag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getZFar:member(1)",
              "docComment": "/**\n * Floating-point distance to the far clipping plane. When defined, zfar must be greater than znear. If zfar is undefined, runtime must use infinite projection matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getZFar(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getZFar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#getZNear:member(1)",
              "docComment": "/**\n * Floating-point distance to the near clipping plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getZNear(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getZNear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Camera#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.CAMERA",
                  "canonicalReference": "@gltf-transform/core!PropertyType.CAMERA:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setAspectRatio:member(1)",
              "docComment": "/**\n * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the canvas is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAspectRatio(aspectRatio: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "aspectRatio",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAspectRatio"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setType:member(1)",
              "docComment": "/**\n * Specifies if the camera uses a perspective or orthographic projection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setType(type: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.CameraType",
                  "canonicalReference": "@gltf-transform/core!GLTF.CameraType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setXMag:member(1)",
              "docComment": "/**\n * Floating-point horizontal magnification of the view, and half the view's width in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setXMag(xmag: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xmag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setXMag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setYFov:member(1)",
              "docComment": "/**\n * Floating-point vertical field of view in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setYFov(yfov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yfov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setYFov"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setYMag:member(1)",
              "docComment": "/**\n * Floating-point vertical magnification of the view, and half the view's height in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setYMag(ymag: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ymag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setYMag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setZFar:member(1)",
              "docComment": "/**\n * Floating-point distance to the far clipping plane. When defined, zfar must be greater than znear. If zfar is undefined, runtime must use infinite projection matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setZFar(zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setZFar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Camera#setZNear:member(1)",
              "docComment": "/**\n * Floating-point distance to the near clipping plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setZNear(znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setZNear"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Camera.Type:member",
              "docComment": "/**\n * ******************************************************************************************** Constants.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Type: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.CameraType",
                  "canonicalReference": "@gltf-transform/core!GLTF.CameraType:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!ColorUtils:class",
          "docComment": "/**\n * # ColorUtils\n *\n * *Common utilities for working with colors in vec3, vec4, or hexadecimal form.*\n *\n * Provides methods to convert linear components (vec3, vec4) to sRGB hex values. All colors in the glTF specification, excluding color textures, are linear. Hexadecimal values, in sRGB colorspace, are accessible through helper functions in the API as a convenience.\n * ```typescript\n * // Hex (sRGB) to factor (linear).\n * const factor = ColorUtils.hexToFactor(0xFFCCCC, []);\n *\n * // Factor (linear) to hex (sRGB).\n * const hex = ColorUtils.factorToHex([1, .25, .25])\n * ```\n *\n * @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ColorUtils "
            }
          ],
          "fileUrlPath": "dist/utils/color-utils.d.ts",
          "releaseTag": "Public",
          "name": "ColorUtils",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ColorUtils.convertLinearToSRGB:member(1)",
              "docComment": "/**\n * Converts linear components to sRGB components.\n *\n * @typeParam T - vec3 or vec4 linear components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertLinearToSRGB<T = "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ">(source: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "convertLinearToSRGB"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ColorUtils.convertSRGBToLinear:member(1)",
              "docComment": "/**\n * Converts sRGB components to linear components.\n *\n * @typeParam T - vec3 or vec4 linear components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertSRGBToLinear<T = "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ">(source: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "convertSRGBToLinear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ColorUtils.factorToHex:member(1)",
              "docComment": "/**\n * Converts linear components to sRGB hexadecimal.\n *\n * @typeParam T - vec3 or vec4 linear components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static factorToHex<T = "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ">(factor: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "factor",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "factorToHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ColorUtils.hexToFactor:member(1)",
              "docComment": "/**\n * Converts sRGB hexadecimal to linear components.\n *\n * @typeParam T - vec3 or vec4 linear components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static hexToFactor<T = "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ">(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "hexToFactor"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/core!COPY_IDENTITY:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COPY_IDENTITY: "
            },
            {
              "kind": "Content",
              "text": "<T extends "
            },
            {
              "kind": "Reference",
              "text": "Property",
              "canonicalReference": "@gltf-transform/core!Property:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IProperty",
              "canonicalReference": "@gltf-transform/core!IProperty:interface"
            },
            {
              "kind": "Content",
              "text": ">>(t: T) => T"
            }
          ],
          "fileUrlPath": "dist/properties/property.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "COPY_IDENTITY",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!DenoIO:class",
          "docComment": "/**\n * # DenoIO\n *\n * *I/O service for [Deno](https://deno.land/).*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path. Methods are also available for converting in-memory representations of raw glTF files, both binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * _*NOTICE:* Support for the Deno environment is currently experimental. See [glTF-Transform#457](https://github.com/donmccurdy/glTF-Transform/issues/457)._\n *\n * Usage:\n * ```typescript\n * import { DenoIO } from 'https://esm.sh/@gltf-transform/core';\n * import * as path from 'https://deno.land/std/path/mod.ts';\n *\n * const io = new DenoIO(path);\n *\n * // Read.\n * let document;\n * document = io.read('model.glb');  // → Document\n * document = io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = io.writeBinary(document);  // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DenoIO extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformIO",
              "canonicalReference": "@gltf-transform/core!PlatformIO:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/io/deno-io.d.ts",
          "releaseTag": "Public",
          "name": "DenoIO",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!DenoIO:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DenoIO` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(path: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!DenoIO#dirname:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected dirname(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "dirname"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!DenoIO#readURI:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'view'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!DenoIO#readURI:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'text'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!DenoIO#resolve:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resolve(base: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "resolve"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Document_2:class",
          "docComment": "/**\n * # Document\n *\n * *Wraps a glTF asset and its resources for easier modification.*\n *\n * Documents manage glTF assets and the relationships among dependencies. The document wrapper allow tools to read and write changes without dealing with array indices or byte offsets, which would otherwise require careful management over the course of a file modification. An internal graph structure allows any property in the glTF file to maintain references to its dependencies, and makes it easy to determine where a particular property dependency is being used. For example, finding a list of materials that use a particular texture is as simple as calling {@link Texture.listParents}().\n *\n * A new resource {@link Property} (e.g. a {@link Mesh} or {@link Material}) is created by calling 'create' methods on the document. Resources are destroyed by calling {@link Property.dispose}().\n * ```ts\n * import fs from 'fs/promises';\n * import { Document } from '@gltf-transform/core';\n * import { dedup } from '@gltf-transform/functions';\n *\n * const doc = new Document();\n *\n * const texture1 = doc.createTexture('myTexture')\n * \t.setImage(await fs.readFile('path/to/image.png'))\n * \t.setMimeType('image/png');\n * const texture2 = doc.createTexture('myTexture2')\n * \t.setImage(await fs.readFile('path/to/image2.png'))\n * \t.setMimeType('image/png');\n *\n * // Document containing duplicate copies of the same texture.\n * doc.getRoot().listTextures(); // → [texture x 2]\n *\n * await doc.transform(\n * \tdedup({textures: true}),\n * \t// ...\n * );\n *\n * // Document with duplicate textures removed.\n * doc.getRoot().listTextures(); // → [texture x 1]\n * ```\n *\n * Reference: - [glTF → Basics](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#gltf-basics) - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Documents\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Document "
            }
          ],
          "fileUrlPath": "dist/document.d.ts",
          "releaseTag": "Public",
          "name": "Document_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#clone:member(1)",
              "docComment": "/**\n * Clones this Document, copying all resources within it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createAccessor:member(1)",
              "docComment": "/**\n * Creates a new {@link Accessor} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAccessor(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", buffer?: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createAccessor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createAnimation:member(1)",
              "docComment": "/**\n * Creates a new {@link Animation} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAnimation(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Animation",
                  "canonicalReference": "@gltf-transform/core!Animation_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createAnimation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createAnimationChannel:member(1)",
              "docComment": "/**\n * Creates a new {@link AnimationChannel}. Channels must be attached to an {@link Animation} for use and export; they are not otherwise associated with a {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAnimationChannel(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationChannel",
                  "canonicalReference": "@gltf-transform/core!AnimationChannel:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createAnimationChannel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createAnimationSampler:member(1)",
              "docComment": "/**\n * Creates a new {@link AnimationSampler}. Samplers must be attached to an {@link Animation} for use and export; they are not otherwise associated with a {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAnimationSampler(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationSampler",
                  "canonicalReference": "@gltf-transform/core!AnimationSampler:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createAnimationSampler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createBuffer:member(1)",
              "docComment": "/**\n * Creates a new {@link Buffer} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createBuffer(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createCamera:member(1)",
              "docComment": "/**\n * Creates a new {@link Camera} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createCamera(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createCamera"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createExtension:member(1)",
              "docComment": "/**\n * Creates a new {@link Extension}, for the extension type of the given constructor. If the extension is already enabled for this Document, the previous Extension reference is reused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createExtension<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Extension",
                  "canonicalReference": "@gltf-transform/core!Extension:class"
                },
                {
                  "kind": "Content",
                  "text": ">(ctor: "
                },
                {
                  "kind": "Content",
                  "text": "new (doc: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ") => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ctor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createExtension"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createMaterial:member(1)",
              "docComment": "/**\n * Creates a new {@link Material} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createMaterial(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createMaterial"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createMesh:member(1)",
              "docComment": "/**\n * Creates a new {@link Mesh} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createMesh(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createMesh"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createNode:member(1)",
              "docComment": "/**\n * Creates a new {@link Node} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createNode(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createPrimitive:member(1)",
              "docComment": "/**\n * Creates a new {@link Primitive}. Primitives must be attached to a {@link Mesh} for use and export; they are not otherwise associated with a {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createPrimitive(): "
                },
                {
                  "kind": "Reference",
                  "text": "Primitive",
                  "canonicalReference": "@gltf-transform/core!Primitive:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "createPrimitive"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createPrimitiveTarget:member(1)",
              "docComment": "/**\n * Creates a new {@link PrimitiveTarget}, or morph target. Targets must be attached to a {@link Primitive} for use and export; they are not otherwise associated with a {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createPrimitiveTarget(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PrimitiveTarget",
                  "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createPrimitiveTarget"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createScene:member(1)",
              "docComment": "/**\n * Creates a new {@link Scene} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createScene(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createScene"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createSkin:member(1)",
              "docComment": "/**\n * Creates a new {@link Skin} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createSkin(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createSkin"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#createTexture:member(1)",
              "docComment": "/**\n * Creates a new {@link Texture} attached to this document's {@link Root}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTexture(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "createTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#getGraph:member(1)",
              "docComment": "/**\n * Returns the {@link Graph} representing connectivity of resources within this document.\n *\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGraph(): "
                },
                {
                  "kind": "Reference",
                  "text": "Graph",
                  "canonicalReference": "property-graph!Graph:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getGraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#getLogger:member(1)",
              "docComment": "/**\n * Returns the {@link Logger} instance used for any operations performed on this document.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLogger(): "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@gltf-transform/core!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getLogger"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#getRoot:member(1)",
              "docComment": "/**\n * Returns the glTF {@link Root} property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRoot(): "
                },
                {
                  "kind": "Reference",
                  "text": "Root",
                  "canonicalReference": "@gltf-transform/core!Root:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getRoot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#merge:member(1)",
              "docComment": "/**\n * Merges the content of another Document into this one, without affecting the original.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "merge(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "merge"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#setLogger:member(1)",
              "docComment": "/**\n * Overrides the {@link Logger} instance used for any operations performed on this document.\n *\n * Usage:\n * ```ts\n * doc\n * \t.setLogger(new Logger(Logger.Verbosity.SILENT))\n * \t.transform(dedup(), weld());\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLogger(logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@gltf-transform/core!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "logger",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setLogger"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Document_2#transform:member(1)",
              "docComment": "/**\n * Applies a series of modifications to this document. Each transformation is asynchronous, takes the {@link Document} as input, and returns nothing. Transforms are applied in the order given, which may affect the final result.\n *\n * Usage:\n * ```ts\n * await doc.transform(\n * \tdedup(),\n * \tprune()\n * );\n * ```\n *\n * @param transforms - List of synchronous transformation functions to apply.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transform(...transforms: "
                },
                {
                  "kind": "Reference",
                  "text": "Transform",
                  "canonicalReference": "@gltf-transform/core!Transform:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<this>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transforms",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "transform"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class",
          "docComment": "/**\n * # ExtensibleProperty\n *\n * *A {@link Property} that can have {@link ExtensionProperty} instances attached.*\n *\n * Most properties are extensible. See the {@link Extension} documentation for information about how to use extensions.\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ExtensibleProperty<T extends "
            },
            {
              "kind": "Reference",
              "text": "IExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!~IExtensibleProperty:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "IExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!~IExtensibleProperty:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Property",
              "canonicalReference": "@gltf-transform/core!Property:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/extensible-property.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "ExtensibleProperty",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty#getExtension:member(1)",
              "docComment": "/**\n * Returns an {@link ExtensionProperty} attached to this Property, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getExtension<Prop extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtensionProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensionProperty:class"
                },
                {
                  "kind": "Content",
                  "text": ">(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Prop | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Prop",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getExtension"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty#listExtensions:member(1)",
              "docComment": "/**\n * Lists all {@link ExtensionProperty} instances attached to this Property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listExtensions(): "
                },
                {
                  "kind": "Reference",
                  "text": "ExtensionProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensionProperty:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listExtensions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty#setExtension:member(1)",
              "docComment": "/**\n * Attaches the given {@link ExtensionProperty} to this Property. For a given extension, only one ExtensionProperty may be attached to any one Property at a time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setExtension<Prop extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtensionProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensionProperty:class"
                },
                {
                  "kind": "Content",
                  "text": ">(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", extensionProperty: "
                },
                {
                  "kind": "Content",
                  "text": "Prop | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Prop",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "extensionProperty",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setExtension"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Extension:class",
          "docComment": "/**\n * # Extension\n *\n * *Base class for all Extensions.*\n *\n * Extensions enhance a glTF {@link Document} with additional features and schema, beyond the core glTF specification. Common extensions may be imported from the `@gltf-transform/extensions` package, or custom extensions may be created by extending this base class.\n *\n * An extension is added to a Document by calling {@link Document.createExtension} with the extension constructor. The extension object may then be used to construct {@link ExtensionProperty} instances, which are attached to properties throughout the Document as prescribed by the extension itself.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference: - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions) - [glTF Extension Registry](https://github.com/KhronosGroup/gltf/blob/main/extensions)\n *\n * @category Extensions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Extension "
            }
          ],
          "fileUrlPath": "dist/extension.d.ts",
          "releaseTag": "Public",
          "name": "Extension",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!Extension:constructor(1)",
              "docComment": "/**\n * @hidden Constructs a new instance of the `Extension` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(document: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "document",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#dispose:member(1)",
              "docComment": "/**\n * Disables and removes the extension from the Document.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#document:member",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly document: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "document",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension.EXTENSION_NAME:member",
              "docComment": "/**\n * Official name of the extension.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static EXTENSION_NAME: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "EXTENSION_NAME",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#extensionName:member",
              "docComment": "/**\n * Official name of the extension.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly extensionName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extensionName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#install:member(1)",
              "docComment": "/**\n * @hidden Installs dependencies required by the extension.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "install(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", dependency: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dependency",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "install"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#isRequired:member(1)",
              "docComment": "/**\n * Indicates to the client whether it is OK to load the asset when this extension is not recognized. Optional extensions are generally preferred, if there is not a good reason to require a client to completely fail when an extension isn't known.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isRequired(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "isRequired"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#listProperties:member(1)",
              "docComment": "/**\n * Lists all {@link ExtensionProperty} instances associated with, or created by, this extension. Includes only instances that are attached to the Document's graph; detached instances will be excluded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listProperties(): "
                },
                {
                  "kind": "Reference",
                  "text": "ExtensionProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensionProperty:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listProperties"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#preread:member(1)",
              "docComment": "/**\n * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method may optionally be implemented by an extension, and should then support any property type declared by the Extension's {@link Extension.prereadTypes} list. The Extension will be given a ReaderContext instance, and is expected to update either the context or its {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to implement this.*  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preread(_readerContext: "
                },
                {
                  "kind": "Reference",
                  "text": "ReaderContext",
                  "canonicalReference": "@gltf-transform/core!ReaderContext:class"
                },
                {
                  "kind": "Content",
                  "text": ", _propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType",
                  "canonicalReference": "@gltf-transform/core!PropertyType:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_readerContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_propertyType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "preread"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#prereadTypes:member",
              "docComment": "/**\n * Before reading, extension should be called for these {@link Property} types. *Most extensions don't need to implement this.*  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly prereadTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType",
                  "canonicalReference": "@gltf-transform/core!PropertyType:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prereadTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#prewrite:member(1)",
              "docComment": "/**\n * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method may optionally be implemented by an extension, and should then support any property type declared by the Extension's {@link Extension.prewriteTypes} list. The Extension will be given a WriterContext instance, and is expected to update either the context or its {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to implement this.*  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prewrite(_writerContext: "
                },
                {
                  "kind": "Reference",
                  "text": "WriterContext",
                  "canonicalReference": "@gltf-transform/core!WriterContext:class"
                },
                {
                  "kind": "Content",
                  "text": ", _propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType",
                  "canonicalReference": "@gltf-transform/core!PropertyType:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_writerContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_propertyType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "prewrite"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#prewriteTypes:member",
              "docComment": "/**\n * Before writing, extension should be called for these {@link Property} types. *Most extensions don't need to implement this.*  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly prewriteTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType",
                  "canonicalReference": "@gltf-transform/core!PropertyType:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prewriteTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#properties:member",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected properties: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExtensionProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensionProperty:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#read:member(1)",
              "docComment": "/**\n * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method must be implemented by each extension in order to support reading files. The extension will be given a ReaderContext instance, and should update the current {@link Document} accordingly.  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract read(readerContext: "
                },
                {
                  "kind": "Reference",
                  "text": "ReaderContext",
                  "canonicalReference": "@gltf-transform/core!ReaderContext:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "readerContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "read"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#readDependencies:member",
              "docComment": "/**\n * @hidden Dependency IDs needed to read this extension, to be installed before I/O.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly readDependencies: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "readDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension.register:member(1)",
              "docComment": "/**\n * @hidden Performs first-time setup for the extension. Must be idempotent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static register(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "register"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#required:member",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected required: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#setRequired:member(1)",
              "docComment": "/**\n * Indicates to the client whether it is OK to load the asset when this extension is not recognized. Optional extensions are generally preferred, if there is not a good reason to require a client to completely fail when an extension isn't known.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRequired(required: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "required",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setRequired"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Extension#write:member(1)",
              "docComment": "/**\n * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method must be implemented by each extension in order to support writing files. The extension will be given a WriterContext instance, and should modify the {@link JSONDocument} output accordingly. Adding the extension name to the `extensionsUsed` and `extensionsRequired` list is done automatically, and should not be included here.  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract write(writerContext: "
                },
                {
                  "kind": "Reference",
                  "text": "WriterContext",
                  "canonicalReference": "@gltf-transform/core!WriterContext:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "writerContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "write"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Extension#writeDependencies:member",
              "docComment": "/**\n * @hidden Dependency IDs needed to write this extension, to be installed before I/O.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly writeDependencies: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "writeDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!ExtensionProperty:class",
          "docComment": "/**\n * # ExtensionProperty\n *\n * *Base class for all {@link Property} types that can be attached by an {@link Extension}.*\n *\n * After an {@link Extension} is attached to a glTF {@link Document}, the Extension may be used to construct ExtensionProperty instances, to be referenced throughout the document as prescribed by the Extension. For example, the `KHR_materials_clearcoat` Extension defines a `Clearcoat` ExtensionProperty, which is referenced by {@link Material} Properties in the Document, and may contain references to {@link Texture} properties of its own.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference: - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ExtensionProperty<T extends "
            },
            {
              "kind": "Reference",
              "text": "IProperty",
              "canonicalReference": "@gltf-transform/core!IProperty:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "IProperty",
              "canonicalReference": "@gltf-transform/core!IProperty:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Property",
              "canonicalReference": "@gltf-transform/core!Property:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/extension-property.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "ExtensionProperty",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ExtensionProperty#_validateParent:member(1)",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_validateParent(parent: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtensibleProperty",
                  "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "_validateParent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ExtensionProperty.EXTENSION_NAME:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static EXTENSION_NAME: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "EXTENSION_NAME",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ExtensionProperty#extensionName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract readonly extensionName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extensionName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ExtensionProperty#parentTypes:member",
              "docComment": "/**\n * List of supported {@link Property} types.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract readonly parentTypes: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parentTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!FileUtils:class",
          "docComment": "/**\n * # FileUtils\n *\n * *Utility class for working with file systems and URI paths.*\n *\n * @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FileUtils "
            }
          ],
          "fileUrlPath": "dist/utils/file-utils.d.ts",
          "releaseTag": "Public",
          "name": "FileUtils",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!FileUtils.basename:member(1)",
              "docComment": "/**\n * Extracts the basename from a file path, e.g. \"folder/model.glb\" -> \"model\". See: {@link HTTPUtils.basename}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static basename(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "basename"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!FileUtils.extension:member(1)",
              "docComment": "/**\n * Extracts the extension from a file path, e.g. \"folder/model.glb\" -> \"glb\". See: {@link HTTPUtils.extension}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static extension(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "extension"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/core!Format:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Format "
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "Format",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Format.GLTF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GLTF = "
                },
                {
                  "kind": "Content",
                  "text": "\"GLTF\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GLTF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Format.GLB:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GLB = "
                },
                {
                  "kind": "Content",
                  "text": "\"GLB\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GLB"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/core!GLB_BUFFER:var",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GLB_BUFFER = "
            },
            {
              "kind": "Content",
              "text": "\"@glb.bin\""
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GLB_BUFFER",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@gltf-transform/core!GLTF:namespace",
          "docComment": "/**\n * Module for glTF 2.0 Interface\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare module GLTF "
            }
          ],
          "fileUrlPath": "dist/types/gltf.d.ts",
          "releaseTag": "Public",
          "name": "GLTF",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type",
              "docComment": "/**\n * Data type of the values composing each element in the accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AccessorComponentType = "
                },
                {
                  "kind": "Content",
                  "text": "5120 | 5121 | 5122 | 5123 | 5125 | 5126"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AccessorComponentType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type",
              "docComment": "/**\n * Element type contained by the accessor (SCALAR, VEC2, ...).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AccessorType = "
                },
                {
                  "kind": "Content",
                  "text": "'SCALAR' | 'VEC2' | 'VEC3' | 'VEC4' | 'MAT2' | 'MAT3' | 'MAT4'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AccessorType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.AnimationChannelTargetPath:type",
              "docComment": "/**\n * Name of the property to be modified by an animation channel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AnimationChannelTargetPath = "
                },
                {
                  "kind": "Content",
                  "text": "'translation' | 'rotation' | 'scale' | 'weights'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimationChannelTargetPath",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.AnimationSamplerInterpolation:type",
              "docComment": "/**\n * Interpolation method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AnimationSamplerInterpolation = "
                },
                {
                  "kind": "Content",
                  "text": "'LINEAR' | 'STEP' | 'CUBICSPLINE'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimationSamplerInterpolation",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.CameraType:type",
              "docComment": "/**\n * Projection type used by a camera.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type CameraType = "
                },
                {
                  "kind": "Content",
                  "text": "'perspective' | 'orthographic'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "CameraType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAccessor:interface",
              "docComment": "/**\n * A typed view into a bufferView. A bufferView contains raw binary data. An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAccessor extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAccessor",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#bufferView:member",
                  "docComment": "/**\n * The index of the bufferview\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bufferView?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "bufferView",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#byteOffset:member",
                  "docComment": "/**\n * The offset relative to the start of the bufferView in bytes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteOffset?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "byteOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#componentType:member",
                  "docComment": "/**\n * The datatype of components in the attribute\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "componentType: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AccessorComponentType",
                      "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "componentType",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#count:member",
                  "docComment": "/**\n * The number of attributes referenced by this accessor\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "count: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "count",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#max:member",
                  "docComment": "/**\n * Maximum value of each component in this attribute\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "max?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "max",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#min:member",
                  "docComment": "/**\n * Minimum value of each component in this attribute\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "min?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "min",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#normalized:member",
                  "docComment": "/**\n * Specifies whether integer data values should be normalized\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "normalized?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "normalized",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#sparse:member",
                  "docComment": "/**\n * Sparse storage of attributes that deviate from their initialization value\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "sparse?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAccessorSparse",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparse:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "sparse",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor#type:member",
                  "docComment": "/**\n * Specifies if the attribute is a scalar, vector, or matrix\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AccessorType",
                      "canonicalReference": "@gltf-transform/core!GLTF.AccessorType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparse:interface",
              "docComment": "/**\n * Sparse storage of attributes that deviate from their initialization value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAccessorSparse extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAccessorSparse",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparse#count:member",
                  "docComment": "/**\n * The number of attributes encoded in this sparse accessor\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "count: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "count",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparse#indices:member",
                  "docComment": "/**\n * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "indices: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAccessorSparseIndices",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseIndices:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "indices",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparse#values:member",
                  "docComment": "/**\n * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "values: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAccessorSparseValues",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseValues:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "values",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseIndices:interface",
              "docComment": "/**\n * Indices of those attributes that deviate from their initialization value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAccessorSparseIndices extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAccessorSparseIndices",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseIndices#bufferView:member",
                  "docComment": "/**\n * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bufferView: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "bufferView",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseIndices#byteOffset:member",
                  "docComment": "/**\n * The offset relative to the start of the bufferView in bytes. Must be aligned\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteOffset?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "byteOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseIndices#componentType:member",
                  "docComment": "/**\n * The indices data type. Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "componentType: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AccessorComponentType",
                      "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "componentType",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseValues:interface",
              "docComment": "/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAccessorSparseValues extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAccessorSparseValues",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseValues#bufferView:member",
                  "docComment": "/**\n * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bufferView: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "bufferView",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessorSparseValues#byteOffset:member",
                  "docComment": "/**\n * The offset relative to the start of the bufferView in bytes. Must be aligned\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteOffset?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "byteOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAnimation:interface",
              "docComment": "/**\n * A keyframe animation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAnimation extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAnimation",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimation#channels:member",
                  "docComment": "/**\n * An array of channels, each of which targets an animation's sampler at a node's property\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "channels: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAnimationChannel",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannel:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "channels",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimation#samplers:member",
                  "docComment": "/**\n * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "samplers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAnimationSampler",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAnimationSampler:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "samplers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannel:interface",
              "docComment": "/**\n * Targets an animation's sampler at a node's property\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAnimationChannel extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAnimationChannel",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannel#sampler:member",
                  "docComment": "/**\n * The index of a sampler in this animation used to compute the value for the target\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "sampler: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "sampler",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannel#target:member",
                  "docComment": "/**\n * The index of the node and TRS property to target\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "target: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAnimationChannelTarget",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannelTarget:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "target",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannelTarget:interface",
              "docComment": "/**\n * The index of the node and TRS property that an animation channel targets\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAnimationChannelTarget extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAnimationChannelTarget",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannelTarget#node:member",
                  "docComment": "/**\n * The index of the node to target, when undefined, the animated object MAY be defined by an extension.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "node?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "node",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationChannelTarget#path:member",
                  "docComment": "/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "path: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimationChannelTargetPath",
                      "canonicalReference": "@gltf-transform/core!GLTF.AnimationChannelTargetPath:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "path",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAnimationSampler:interface",
              "docComment": "/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAnimationSampler extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAnimationSampler",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationSampler#input:member",
                  "docComment": "/**\n * The index of an accessor containing keyframe input values, e.g., time\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "input: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "input",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationSampler#interpolation:member",
                  "docComment": "/**\n * Interpolation algorithm\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "interpolation?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimationSamplerInterpolation",
                      "canonicalReference": "@gltf-transform/core!GLTF.AnimationSamplerInterpolation:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "interpolation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAnimationSampler#output:member",
                  "docComment": "/**\n * The index of an accessor, containing keyframe output values\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "output: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "output",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IAsset:interface",
              "docComment": "/**\n * Metadata about the glTF asset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IAsset extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IAsset",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAsset#copyright:member",
                  "docComment": "/**\n * A copyright message suitable for display to credit the content creator\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "copyright?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "copyright",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAsset#generator:member",
                  "docComment": "/**\n * Tool that generated this glTF model. Useful for debugging\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "generator?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "generator",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAsset#minVersion:member",
                  "docComment": "/**\n * The minimum glTF version that this asset targets\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "minVersion?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "minVersion",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAsset#version:member",
                  "docComment": "/**\n * The glTF version that this asset targets\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "version: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "version",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IBuffer:interface",
              "docComment": "/**\n * A buffer points to binary geometry, animation, or skins\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IBuffer extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IBuffer",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBuffer#byteLength:member",
                  "docComment": "/**\n * The length of the buffer in bytes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteLength: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "byteLength",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBuffer#uri:member",
                  "docComment": "/**\n * The uri of the buffer. Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "uri?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uri",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IBufferView:interface",
              "docComment": "/**\n * A view into a buffer generally representing a subset of the buffer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IBufferView extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IBufferView",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBufferView#buffer:member",
                  "docComment": "/**\n * The index of the buffer\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "buffer: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "buffer",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBufferView#byteLength:member",
                  "docComment": "/**\n * The lenth of the bufferView in bytes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteLength: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "byteLength",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBufferView#byteOffset:member",
                  "docComment": "/**\n * The offset into the buffer in bytes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteOffset?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "byteOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBufferView#byteStride:member",
                  "docComment": "/**\n * The stride, in bytes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "byteStride?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "byteStride",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IBufferView#target:member",
                  "docComment": "/**\n * The target that the GPU buffer should be bound to\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "target?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "target",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ICamera:interface",
              "docComment": "/**\n * A camera's projection. A node can reference a camera to apply a transform to place the camera in the scene\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ICamera extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ICamera",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICamera#orthographic:member",
                  "docComment": "/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "orthographic?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ICameraOrthographic",
                      "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "orthographic",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICamera#perspective:member",
                  "docComment": "/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "perspective?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ICameraPerspective",
                      "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "perspective",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICamera#type:member",
                  "docComment": "/**\n * Specifies if the camera uses a perspective or orthographic projection\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "CameraType",
                      "canonicalReference": "@gltf-transform/core!GLTF.CameraType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic:interface",
              "docComment": "/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ICameraOrthographic extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ICameraOrthographic",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic#xmag:member",
                  "docComment": "/**\n * The floating-point horizontal magnification of the view. Must not be zero\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "xmag: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "xmag",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic#ymag:member",
                  "docComment": "/**\n * The floating-point vertical magnification of the view. Must not be zero\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "ymag: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "ymag",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic#zfar:member",
                  "docComment": "/**\n * The floating-point distance to the far clipping plane. zfar must be greater than znear\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "zfar: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "zfar",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraOrthographic#znear:member",
                  "docComment": "/**\n * The floating-point distance to the near clipping plane\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "znear: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "znear",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective:interface",
              "docComment": "/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ICameraPerspective extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ICameraPerspective",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective#aspectRatio:member",
                  "docComment": "/**\n * The floating-point aspect ratio of the field of view\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "aspectRatio?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "aspectRatio",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective#yfov:member",
                  "docComment": "/**\n * The floating-point vertical field of view in radians\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "yfov: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "yfov",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective#zfar:member",
                  "docComment": "/**\n * The floating-point distance to the far clipping plane\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "zfar?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "zfar",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ICameraPerspective#znear:member",
                  "docComment": "/**\n * The floating-point distance to the near clipping plane\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "znear: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "znear",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface",
              "docComment": "/**\n * glTF Child of Root Property\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IChildRootProperty extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IChildRootProperty",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty#name:member",
                  "docComment": "/**\n * The user-defined name of this object\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "name?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "name",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IGLTF:interface",
              "docComment": "/**\n * The root object for a glTF asset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IGLTF extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IGLTF",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#accessors:member",
                  "docComment": "/**\n * An array of accessors. An accessor is a typed view into a bufferView\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "accessors?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAccessor",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAccessor:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "accessors",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#animations:member",
                  "docComment": "/**\n * An array of keyframe animations\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "animations?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAnimation",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAnimation:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "animations",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#asset:member",
                  "docComment": "/**\n * Metadata about the glTF asset\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "asset: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IAsset",
                      "canonicalReference": "@gltf-transform/core!GLTF.IAsset:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "asset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#buffers:member",
                  "docComment": "/**\n * An array of buffers. A buffer points to binary geometry, animation, or skins\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "buffers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IBuffer",
                      "canonicalReference": "@gltf-transform/core!GLTF.IBuffer:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "buffers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#bufferViews:member",
                  "docComment": "/**\n * An array of bufferViews. A bufferView is a view into a buffer generally representing a subset of the buffer\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bufferViews?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IBufferView",
                      "canonicalReference": "@gltf-transform/core!GLTF.IBufferView:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "bufferViews",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#cameras:member",
                  "docComment": "/**\n * An array of cameras\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "cameras?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ICamera",
                      "canonicalReference": "@gltf-transform/core!GLTF.ICamera:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "cameras",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#extensionsRequired:member",
                  "docComment": "/**\n * Names of glTF extensions required to properly load this asset\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extensionsRequired?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "extensionsRequired",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#extensionsUsed:member",
                  "docComment": "/**\n * Names of glTF extensions used somewhere in this asset\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extensionsUsed?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "extensionsUsed",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#images:member",
                  "docComment": "/**\n * An array of images. An image defines data used to create a texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "images?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IImage",
                      "canonicalReference": "@gltf-transform/core!GLTF.IImage:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "images",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#materials:member",
                  "docComment": "/**\n * An array of materials. A material defines the appearance of a primitive\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "materials?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMaterial",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMaterial:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "materials",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#meshes:member",
                  "docComment": "/**\n * An array of meshes. A mesh is a set of primitives to be rendered\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "meshes?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMesh",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMesh:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "meshes",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#nodes:member",
                  "docComment": "/**\n * An array of nodes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "nodes?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "INode",
                      "canonicalReference": "@gltf-transform/core!GLTF.INode:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "nodes",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#samplers:member",
                  "docComment": "/**\n * An array of samplers. A sampler contains properties for texture filtering and wrapping modes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "samplers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ISampler",
                      "canonicalReference": "@gltf-transform/core!GLTF.ISampler:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "samplers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#scene:member",
                  "docComment": "/**\n * The index of the default scene\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "scene?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "scene",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#scenes:member",
                  "docComment": "/**\n * An array of scenes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "scenes?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IScene",
                      "canonicalReference": "@gltf-transform/core!GLTF.IScene:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "scenes",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#skins:member",
                  "docComment": "/**\n * An array of skins. A skin is defined by joints and matrices\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "skins?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ISkin",
                      "canonicalReference": "@gltf-transform/core!GLTF.ISkin:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "skins",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF#textures:member",
                  "docComment": "/**\n * An array of textures\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "textures?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ITexture",
                      "canonicalReference": "@gltf-transform/core!GLTF.ITexture:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "textures",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IImage:interface",
              "docComment": "/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IImage extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IImage",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IImage#bufferView:member",
                  "docComment": "/**\n * The index of the bufferView that contains the image. Use this instead of the image's uri property\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bufferView?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "bufferView",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IImage#mimeType:member",
                  "docComment": "/**\n * The image's MIME type\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "mimeType?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "mimeType",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IImage#uri:member",
                  "docComment": "/**\n * The uri of the image. Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri. The image format must be jpg or png\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "uri?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uri",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMaterial:interface",
              "docComment": "/**\n * The material appearance of a primitive\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMaterial extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IMaterial",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#alphaCutoff:member",
                  "docComment": "/**\n * The alpha cutoff value of the material\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "alphaCutoff?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "alphaCutoff",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#alphaMode:member",
                  "docComment": "/**\n * The alpha rendering mode of the material\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "alphaMode?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "MaterialAlphaMode",
                      "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "alphaMode",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#doubleSided:member",
                  "docComment": "/**\n * Specifies whether the material is double sided\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "doubleSided?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "doubleSided",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#emissiveFactor:member",
                  "docComment": "/**\n * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "emissiveFactor?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "emissiveFactor",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#emissiveTexture:member",
                  "docComment": "/**\n * The emissive map texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "emissiveTexture?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ITextureInfo",
                      "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "emissiveTexture",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#normalTexture:member",
                  "docComment": "/**\n * The normal map texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "normalTexture?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMaterialNormalTextureInfo",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMaterialNormalTextureInfo:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "normalTexture",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#occlusionTexture:member",
                  "docComment": "/**\n * The occlusion map texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "occlusionTexture?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMaterialOcclusionTextureInfo",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMaterialOcclusionTextureInfo:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "occlusionTexture",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterial#pbrMetallicRoughness:member",
                  "docComment": "/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "pbrMetallicRoughness?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMaterialPbrMetallicRoughness",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "pbrMetallicRoughness",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMaterialNormalTextureInfo:interface",
              "docComment": "/**\n * Material Normal Texture Info\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMaterialNormalTextureInfo extends "
                },
                {
                  "kind": "Reference",
                  "text": "ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IMaterialNormalTextureInfo",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialNormalTextureInfo#scale:member",
                  "docComment": "/**\n * The scalar multiplier applied to each normal vector of the normal texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "scale?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "scale",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMaterialOcclusionTextureInfo:interface",
              "docComment": "/**\n * Material Occlusion Texture Info\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMaterialOcclusionTextureInfo extends "
                },
                {
                  "kind": "Reference",
                  "text": "ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IMaterialOcclusionTextureInfo",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialOcclusionTextureInfo#strength:member",
                  "docComment": "/**\n * A scalar multiplier controlling the amount of occlusion applied\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "strength?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "strength",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness:interface",
              "docComment": "/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMaterialPbrMetallicRoughness "
                }
              ],
              "releaseTag": "Public",
              "name": "IMaterialPbrMetallicRoughness",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness#baseColorFactor:member",
                  "docComment": "/**\n * The material's base color factor\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "baseColorFactor?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "baseColorFactor",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness#baseColorTexture:member",
                  "docComment": "/**\n * The base color texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "baseColorTexture?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ITextureInfo",
                      "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "baseColorTexture",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness#metallicFactor:member",
                  "docComment": "/**\n * The metalness of the material\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "metallicFactor?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "metallicFactor",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness#metallicRoughnessTexture:member",
                  "docComment": "/**\n * The metallic-roughness texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "metallicRoughnessTexture?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ITextureInfo",
                      "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "metallicRoughnessTexture",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMaterialPbrMetallicRoughness#roughnessFactor:member",
                  "docComment": "/**\n * The roughness of the material\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "roughnessFactor?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "roughnessFactor",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMesh:interface",
              "docComment": "/**\n * A set of primitives to be rendered. A node can contain one mesh. A node's transform places the mesh in the scene\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMesh extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IMesh",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMesh#primitives:member",
                  "docComment": "/**\n * An array of primitives, each defining geometry to be rendered with a material\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "primitives: "
                    },
                    {
                      "kind": "Reference",
                      "text": "IMeshPrimitive",
                      "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "primitives",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMesh#weights:member",
                  "docComment": "/**\n * Array of weights to be applied to the Morph Targets\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "weights?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "weights",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive:interface",
              "docComment": "/**\n * Geometry to be rendered with the given material\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IMeshPrimitive extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IMeshPrimitive",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive#attributes:member",
                  "docComment": "/**\n * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "attributes: "
                    },
                    {
                      "kind": "Content",
                      "text": "{\n            [name: string]: number;\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "attributes",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive#indices:member",
                  "docComment": "/**\n * The index of the accessor that contains the indices\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "indices?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "indices",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive#material:member",
                  "docComment": "/**\n * The index of the material to apply to this primitive when rendering\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "material?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "material",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive#mode:member",
                  "docComment": "/**\n * The type of primitives to render. All valid values correspond to WebGL enums\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "mode?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "MeshPrimitiveMode",
                      "canonicalReference": "@gltf-transform/core!GLTF.MeshPrimitiveMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "mode",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IMeshPrimitive#targets:member",
                  "docComment": "/**\n * An array of Morph Targets, each Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "targets?: "
                    },
                    {
                      "kind": "Content",
                      "text": "{\n            [name: string]: number;\n        }[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "targets",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.INode:interface",
              "docComment": "/**\n * A node in the node hierarchy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface INode extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "INode",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#camera:member",
                  "docComment": "/**\n * The index of the camera referenced by this node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "camera?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "camera",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#children:member",
                  "docComment": "/**\n * The indices of this node's children\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "children?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "children",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#matrix:member",
                  "docComment": "/**\n * A floating-point 4x4 transformation matrix stored in column-major order\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "matrix?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "matrix",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#mesh:member",
                  "docComment": "/**\n * The index of the mesh in this node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "mesh?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "mesh",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#rotation:member",
                  "docComment": "/**\n * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "rotation?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "rotation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#scale:member",
                  "docComment": "/**\n * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "scale?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "scale",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#skin:member",
                  "docComment": "/**\n * The index of the skin referenced by this node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "skin?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "skin",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#translation:member",
                  "docComment": "/**\n * The node's translation along the x, y, and z axes\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "translation?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "translation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.INode#weights:member",
                  "docComment": "/**\n * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "weights?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "weights",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface",
              "docComment": "/**\n * glTF Property\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IProperty "
                }
              ],
              "releaseTag": "Public",
              "name": "IProperty",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty#extensions:member",
                  "docComment": "/**\n * Dictionary object with extension-specific objects\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extensions?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Record",
                      "canonicalReference": "!Record:type"
                    },
                    {
                      "kind": "Content",
                      "text": "<string, unknown>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "extensions",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty#extras:member",
                  "docComment": "/**\n * Application-Specific data\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extras?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Record",
                      "canonicalReference": "!Record:type"
                    },
                    {
                      "kind": "Content",
                      "text": "<string, unknown>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "extras",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ISampler:interface",
              "docComment": "/**\n * Texture sampler properties for filtering and wrapping modes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ISampler extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ISampler",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISampler#magFilter:member",
                  "docComment": "/**\n * Magnification filter. Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "magFilter?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "TextureMagFilter",
                      "canonicalReference": "@gltf-transform/core!GLTF.TextureMagFilter:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "magFilter",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISampler#minFilter:member",
                  "docComment": "/**\n * Minification filter. All valid values correspond to WebGL enums\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "minFilter?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "TextureMinFilter",
                      "canonicalReference": "@gltf-transform/core!GLTF.TextureMinFilter:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "minFilter",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISampler#wrapS:member",
                  "docComment": "/**\n * S (U) wrapping mode. All valid values correspond to WebGL enums\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "wrapS?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "TextureWrapMode",
                      "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "wrapS",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISampler#wrapT:member",
                  "docComment": "/**\n * T (V) wrapping mode. All valid values correspond to WebGL enums\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "wrapT?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "TextureWrapMode",
                      "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "wrapT",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.IScene:interface",
              "docComment": "/**\n * The root nodes of a scene\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface IScene extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "IScene",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.IScene#nodes:member",
                  "docComment": "/**\n * The indices of each root node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "nodes: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "nodes",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ISkin:interface",
              "docComment": "/**\n * Joints and matrices defining a skin\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ISkin extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ISkin",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISkin#inverseBindMatrices:member",
                  "docComment": "/**\n * The index of the accessor containing the floating-point 4x4 inverse-bind matrices. The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "inverseBindMatrices?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "inverseBindMatrices",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISkin#joints:member",
                  "docComment": "/**\n * Indices of skeleton nodes, used as joints in this skin. The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "joints: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "joints",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ISkin#skeleton:member",
                  "docComment": "/**\n * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "skeleton?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "skeleton",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ITexture:interface",
              "docComment": "/**\n * A texture and its sampler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ITexture extends "
                },
                {
                  "kind": "Reference",
                  "text": "IChildRootProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IChildRootProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ITexture",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITexture#sampler:member",
                  "docComment": "/**\n * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "sampler?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "sampler",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITexture#source:member",
                  "docComment": "/**\n * The index of the image used by this texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "source?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "source",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface",
              "docComment": "/**\n * Reference to a texture\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ITextureInfo extends "
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!GLTF.IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ITextureInfo",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo#index:member",
                  "docComment": "/**\n * The index of the texture\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "index: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "index",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo#texCoord:member",
                  "docComment": "/**\n * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "texCoord?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "texCoord",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type",
              "docComment": "/**\n * The alpha rendering mode of the material.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MaterialAlphaMode = "
                },
                {
                  "kind": "Content",
                  "text": "'OPAQUE' | 'MASK' | 'BLEND'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MaterialAlphaMode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.MeshPrimitiveMode:type",
              "docComment": "/**\n * The type of the GL primitives to render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MeshPrimitiveMode = "
                },
                {
                  "kind": "Content",
                  "text": "0 | 1 | 2 | 3 | 4 | 5 | 6"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MeshPrimitiveMode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.TextureMagFilter:type",
              "docComment": "/**\n * Magnification filter. Values match to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type TextureMagFilter = "
                },
                {
                  "kind": "Content",
                  "text": "9728 | 9729"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "TextureMagFilter",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.TextureMinFilter:type",
              "docComment": "/**\n * Minification filter. All valid values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type TextureMinFilter = "
                },
                {
                  "kind": "Content",
                  "text": "9728 | 9729 | 9984 | 9985 | 9986 | 9987"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "TextureMinFilter",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type",
              "docComment": "/**\n * S (U) wrapping mode. All valid values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type TextureWrapMode = "
                },
                {
                  "kind": "Content",
                  "text": "33071 | 33648 | 10497"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "TextureWrapMode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/core!ILogger:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILogger "
            }
          ],
          "fileUrlPath": "dist/utils/logger.d.ts",
          "releaseTag": "Public",
          "name": "ILogger",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ILogger#debug:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "debug"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ILogger#error:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "error"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ILogger#info:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "info"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ILogger#warn:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "warn"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!ImageUtils:class",
          "docComment": "/**\n * # ImageUtils\n *\n * *Common utilities for working with image data.*\n *\n * @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ImageUtils "
            }
          ],
          "fileUrlPath": "dist/utils/image-utils.d.ts",
          "releaseTag": "Public",
          "name": "ImageUtils",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.extensionToMimeType:member(1)",
              "docComment": "/**\n * Returns the MIME type for the given file extension.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static extensionToMimeType(extension: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extension",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "extensionToMimeType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.getChannels:member(1)",
              "docComment": "/**\n * Returns a conservative estimate of the number of channels in the image. For some image formats, the method may return 4 indicating the possibility of an alpha channel, without the ability to guarantee that an alpha channel is present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getChannels(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getChannels"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.getMemSize:member(1)",
              "docComment": "/**\n * Returns a conservative estimate of the GPU memory required by this image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getMemSize(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMemSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.getMimeType:member(1)",
              "docComment": "/**\n * Returns detected MIME type of the given image buffer. Note that for image formats with support provided by extensions, the extension must be registered with an I/O class before it can be detected by ImageUtils.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getMimeType(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getMimeType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.getSize:member(1)",
              "docComment": "/**\n * Returns the dimensions of the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getSize(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "vec2",
                  "canonicalReference": "@gltf-transform/core!vec2:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getSize"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ImageUtils.impls:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static impls: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "ImageUtilsFormat",
                  "canonicalReference": "@gltf-transform/core!ImageUtilsFormat:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "impls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.mimeTypeToExtension:member(1)",
              "docComment": "/**\n * Returns the preferred file extension for the given MIME type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static mimeTypeToExtension(mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mimeTypeToExtension"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ImageUtils.registerFormat:member(1)",
              "docComment": "/**\n * Registers support for a new image format; useful for certain extensions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static registerFormat(mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", impl: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageUtilsFormat",
                  "canonicalReference": "@gltf-transform/core!ImageUtilsFormat:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "impl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "registerFormat"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/core!ImageUtilsFormat:interface",
          "docComment": "/**\n * Implements support for an image format in the {@link ImageUtils} class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageUtilsFormat "
            }
          ],
          "fileUrlPath": "dist/utils/image-utils.d.ts",
          "releaseTag": "Public",
          "name": "ImageUtilsFormat",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ImageUtilsFormat#getChannels:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getChannels(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getChannels"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ImageUtilsFormat#getGPUByteLength:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGPUByteLength?(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getGPUByteLength"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ImageUtilsFormat#getSize:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSize(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "vec2",
                  "canonicalReference": "@gltf-transform/core!vec2:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getSize"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@gltf-transform/core!ImageUtilsFormat#match:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "match(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "match"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/core!IProperty:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IProperty "
            }
          ],
          "fileUrlPath": "dist/properties/property.d.ts",
          "releaseTag": "Public",
          "name": "IProperty",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/core!IProperty#extras:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extras: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extras",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/core!IProperty#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/core!JSONDocument:interface",
          "docComment": "/**\n * # JSONDocument\n *\n * *Raw glTF asset, with its JSON and binary resources.*\n *\n * A JSONDocument is a plain object containing the raw JSON of a glTF file, and any binary or image resources referenced by that file. When modifying the file, it should generally be first converted to the more useful {@link Document} wrapper.\n *\n * When loading glTF data that is in memory, or which the I/O utilities cannot otherwise access, you might assemble the JSONDocument yourself, then convert it to a Document with {@link PlatformIO.readJSON}(jsonDocument).\n *\n * Usage:\n * ```ts\n * import fs from 'fs/promises';\n *\n * const jsonDocument = {\n * \t// glTF JSON schema.\n * \tjson: {\n * \t\tasset: {version: '2.0'},\n * \t\timages: [{uri: 'image1.png'}, {uri: 'image2.png'}]\n * \t},\n *\n * \t// URI → Uint8Array mapping.\n * \tresources: {\n * \t\t'image1.png': await fs.readFile('image1.png'),\n * \t\t'image2.png': await fs.readFile('image2.png'),\n * \t}\n * };\n *\n * const doc = await new NodeIO().readJSON(jsonDocument);\n * ```\n *\n * @category Documents\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONDocument "
            }
          ],
          "fileUrlPath": "dist/json-document.d.ts",
          "releaseTag": "Public",
          "name": "JSONDocument",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/core!JSONDocument#json:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "json: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.IGLTF",
                  "canonicalReference": "@gltf-transform/core!GLTF.IGLTF:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "json",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/core!JSONDocument#resources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resources: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [s: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Logger:class",
          "docComment": "/**\n * # Logger\n *\n * *Logger utility class.*\n *\n * @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Logger implements "
            },
            {
              "kind": "Reference",
              "text": "ILogger",
              "canonicalReference": "@gltf-transform/core!ILogger:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/utils/logger.d.ts",
          "releaseTag": "Public",
          "name": "Logger",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!Logger:constructor(1)",
              "docComment": "/**\n * Constructs a new Logger instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(verbosity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "verbosity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Logger#debug:member(1)",
              "docComment": "/**\n * Logs an event at level {@link Logger.Verbosity.DEBUG}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "debug"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Logger.DEFAULT_INSTANCE:member",
              "docComment": "/**\n * Default logger instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DEFAULT_INSTANCE: "
                },
                {
                  "kind": "Reference",
                  "text": "Logger",
                  "canonicalReference": "@gltf-transform/core!Logger:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "DEFAULT_INSTANCE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Logger#error:member(1)",
              "docComment": "/**\n * Logs an event at level {@link Logger.Verbosity.ERROR}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Logger#info:member(1)",
              "docComment": "/**\n * Logs an event at level {@link Logger.Verbosity.INFO}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "info"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Logger.Verbosity:member",
              "docComment": "/**\n * Logger verbosity thresholds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Verbosity: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "Verbosity",
                  "canonicalReference": "@gltf-transform/core!Verbosity:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Verbosity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Logger#warn:member(1)",
              "docComment": "/**\n * Logs an event at level {@link Logger.Verbosity.WARN}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "warn"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!mat3:type",
          "docComment": "/**\n * 3x3 matrix, e.g. an affine transform of a 2D vector.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type mat3 = "
            },
            {
              "kind": "Content",
              "text": "[\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "mat3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!mat4:type",
          "docComment": "/**\n * 4x4 matrix, e.g. an affine transform of a 3D vector.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type mat4 = "
            },
            {
              "kind": "Content",
              "text": "[\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "mat4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Material:class",
          "docComment": "/**\n * # Material\n *\n * *Materials describe a surface's appearance and response to light.*\n *\n * Each {@link Primitive} within a {@link Mesh} may be assigned a single Material. The number of GPU draw calls typically increases with both the numbers of Primitives and of Materials in an asset; Materials should be reused wherever possible. Techniques like texture atlasing and vertex colors allow objects to have varied appearances while technically sharing a single Material.\n *\n * Material properties are modified by both scalars (like `baseColorFactor`) and textures (like `baseColorTexture`). When both are available, factors are considered linear multipliers against textures of the same name. In the case of base color, vertex colors (`COLOR_0` attributes) are also multiplied.\n *\n * Textures containing color data (`baseColorTexture`, `emissiveTexture`) are sRGB. All other textures are linear. Like other resources, textures should be reused when possible.\n *\n * Usage:\n * ```typescript\n * const material = doc.createMaterial('myMaterial')\n * \t.setBaseColorFactor([1, 0.5, 0.5, 1]) // RGBA\n * \t.setOcclusionTexture(aoTexture)\n * \t.setOcclusionStrength(0.5);\n *\n * mesh.listPrimitives()\n * \t.forEach((prim) => prim.setMaterial(material));\n * ```\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Material extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMaterial",
              "canonicalReference": "@gltf-transform/core!~IMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/material.d.ts",
          "releaseTag": "Public",
          "name": "Material",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Material.AlphaMode:member",
              "docComment": "/**\n * ******************************************************************************************** Constants.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static AlphaMode: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MaterialAlphaMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "AlphaMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getAlpha:member(1)",
              "docComment": "/**\n * Returns material alpha, equivalent to baseColorFactor[3].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAlpha(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAlpha"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getAlphaCutoff:member(1)",
              "docComment": "/**\n * Returns the visibility threshold; applied only when `.alphaMode='MASK'`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAlphaCutoff(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAlphaCutoff"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getAlphaMode:member(1)",
              "docComment": "/**\n * Returns the mode of the material's alpha channels, which are provided by `baseColorFactor` and `baseColorTexture`.\n *\n * - `OPAQUE`: Alpha value is ignored and the rendered output is fully opaque. - `BLEND`: Alpha value is used to determine the transparency each pixel on a surface, and the fraction of surface vs. background color in the final result. Alpha blending creates significant edge cases in realtime renderers, and some care when structuring the model is necessary for good results. In particular, transparent geometry should be kept in separate meshes or primitives from opaque geometry. The `depthWrite` or `zWrite` settings in engines should usually be disabled on transparent materials. - `MASK`: Alpha value is compared against `alphaCutoff` threshold for each pixel on a surface, and the pixel is either fully visible or fully discarded based on that cutoff. This technique is useful for things like leafs/foliage, grass, fabric meshes, and other surfaces where no semitransparency is needed. With a good choice of `alphaCutoff`, surfaces that don't require semitransparency can avoid the performance penalties and visual issues involved with `BLEND` transparency.\n *\n * Reference: - [glTF → material.alphaMode](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialalphamode)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAlphaMode(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MaterialAlphaMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAlphaMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getBaseColorFactor:member(1)",
              "docComment": "/**\n * Base color / albedo factor; Linear-sRGB components. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBaseColorFactor(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBaseColorFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getBaseColorHex:member(1)",
              "docComment": "/**\n * Base color / albedo; sRGB hexadecimal color. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBaseColorHex(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBaseColorHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getBaseColorTexture:member(1)",
              "docComment": "/**\n * Base color / albedo. The visible color of a non-metallic surface under constant ambient light would be a linear combination (multiplication) of its vertex colors, base color factor, and base color texture. Lighting, and reflections in metallic or smooth surfaces, also effect the final color. The alpha (`.a`) channel of base color factors and textures will have varying effects, based on the setting of {@link getAlphaMode}.\n *\n * Reference: - [glTF → material.pbrMetallicRoughness.baseColorFactor](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessbasecolorfactor)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBaseColorTexture(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBaseColorTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getBaseColorTextureInfo:member(1)",
              "docComment": "/**\n * Settings affecting the material's use of its base color texture. If no texture is attached, {@link TextureInfo} is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBaseColorTextureInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBaseColorTextureInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMaterial",
                  "canonicalReference": "@gltf-transform/core!~IMaterial:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getDoubleSided:member(1)",
              "docComment": "/**\n * Returns true when both sides of triangles should be rendered. May impact performance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDoubleSided(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDoubleSided"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getEmissiveFactor:member(1)",
              "docComment": "/**\n * Emissive color; Linear-sRGB components. See {@link getEmissiveTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmissiveFactor(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getEmissiveFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getEmissiveHex:member(1)",
              "docComment": "/**\n * Emissive; sRGB hexadecimal color. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmissiveHex(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getEmissiveHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getEmissiveTexture:member(1)",
              "docComment": "/**\n * Emissive texture. Emissive color is added to any base color of the material, after any lighting/shadowing are applied. An emissive color does not inherently \"glow\", or affect objects around it at all. To create that effect, most viewers must also enable a post-processing effect called \"bloom\".\n *\n * Reference: - [glTF → material.emissiveTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialemissivetexture)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmissiveTexture(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getEmissiveTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getEmissiveTextureInfo:member(1)",
              "docComment": "/**\n * Settings affecting the material's use of its emissive texture. If no texture is attached, {@link TextureInfo} is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmissiveTextureInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getEmissiveTextureInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getMetallicFactor:member(1)",
              "docComment": "/**\n * Metallic factor; linear multiplier. Affects roughness channel of `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetallicFactor(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetallicFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getMetallicRoughnessTexture:member(1)",
              "docComment": "/**\n * Metallic roughness texture. The metalness values are sampled from the B channel. The roughness values are sampled from the G channel. When a material is fully metallic, or nearly so, it may require image-based lighting (i.e. an environment map) or global illumination to appear well-lit.\n *\n * Reference: - [glTF → material.pbrMetallicRoughness.metallicRoughnessTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessmetallicroughnesstexture)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetallicRoughnessTexture(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetallicRoughnessTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getMetallicRoughnessTextureInfo:member(1)",
              "docComment": "/**\n * Settings affecting the material's use of its metallic/roughness texture. If no texture is attached, {@link TextureInfo} is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetallicRoughnessTextureInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetallicRoughnessTextureInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getNormalScale:member(1)",
              "docComment": "/**\n * Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormalScale(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getNormalScale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getNormalTexture:member(1)",
              "docComment": "/**\n * Normal (surface detail) texture.\n *\n * A tangent space normal map. The texture contains RGB components. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.\n *\n * Reference: - [glTF → material.normalTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialnormaltexture)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormalTexture(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getNormalTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getNormalTextureInfo:member(1)",
              "docComment": "/**\n * Settings affecting the material's use of its normal texture. If no texture is attached, {@link TextureInfo} is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormalTextureInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getNormalTextureInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getOcclusionStrength:member(1)",
              "docComment": "/**\n * (Ambient) Occlusion factor; linear multiplier. Affects `.occlusionTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOcclusionStrength(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getOcclusionStrength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getOcclusionTexture:member(1)",
              "docComment": "/**\n * (Ambient) Occlusion texture, generally used for subtle 'baked' shadowing effects that are independent of an object's position, such as shading in inset areas and corners. Direct lighting is not affected by occlusion, so at least one indirect light source must be present in the scene for occlusion effects to be visible.\n *\n * The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting.\n *\n * Reference: - [glTF → material.occlusionTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialocclusiontexture)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOcclusionTexture(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getOcclusionTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getOcclusionTextureInfo:member(1)",
              "docComment": "/**\n * Settings affecting the material's use of its occlusion texture. If no texture is attached, {@link TextureInfo} is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOcclusionTextureInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getOcclusionTextureInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#getRoughnessFactor:member(1)",
              "docComment": "/**\n * Roughness factor; linear multiplier. Affects roughness channel of `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRoughnessFactor(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getRoughnessFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Material#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.MATERIAL",
                  "canonicalReference": "@gltf-transform/core!PropertyType.MATERIAL:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setAlpha:member(1)",
              "docComment": "/**\n * Sets material alpha, equivalent to baseColorFactor[3].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAlpha(alpha: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAlpha"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setAlphaCutoff:member(1)",
              "docComment": "/**\n * Sets the visibility threshold; applied only when `.alphaMode='MASK'`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAlphaCutoff(alphaCutoff: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alphaCutoff",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAlphaCutoff"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setAlphaMode:member(1)",
              "docComment": "/**\n * Sets the mode of the material's alpha channels. See {@link getAlphaMode} for details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAlphaMode(alphaMode: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MaterialAlphaMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MaterialAlphaMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alphaMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAlphaMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setBaseColorFactor:member(1)",
              "docComment": "/**\n * Base color / albedo factor; Linear-sRGB components. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBaseColorFactor(baseColorFactor: "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "baseColorFactor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setBaseColorFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setBaseColorHex:member(1)",
              "docComment": "/**\n * Base color / albedo; sRGB hexadecimal color. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBaseColorHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setBaseColorHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setBaseColorTexture:member(1)",
              "docComment": "/**\n * Sets base color / albedo texture. See {@link getBaseColorTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBaseColorTexture(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setBaseColorTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setDoubleSided:member(1)",
              "docComment": "/**\n * Sets whether to render both sides of triangles. May impact performance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDoubleSided(doubleSided: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "doubleSided",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setDoubleSided"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setEmissiveFactor:member(1)",
              "docComment": "/**\n * Emissive color; Linear-sRGB components. See {@link getEmissiveTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEmissiveFactor(emissiveFactor: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "emissiveFactor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setEmissiveFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setEmissiveHex:member(1)",
              "docComment": "/**\n * Emissive; sRGB hexadecimal color. See {@link getEmissiveTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEmissiveHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setEmissiveHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setEmissiveTexture:member(1)",
              "docComment": "/**\n * Sets emissive texture. See {@link getEmissiveTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEmissiveTexture(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setEmissiveTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setMetallicFactor:member(1)",
              "docComment": "/**\n * Sets metallic factor; linear multiplier. Affects roughness channel of `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMetallicFactor(factor: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "factor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMetallicFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setMetallicRoughnessTexture:member(1)",
              "docComment": "/**\n * Sets metallic/roughness texture. See {@link getMetallicRoughnessTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMetallicRoughnessTexture(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMetallicRoughnessTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setNormalScale:member(1)",
              "docComment": "/**\n * Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNormalScale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setNormalScale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setNormalTexture:member(1)",
              "docComment": "/**\n * Sets normal (surface detail) texture. See {@link getNormalTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNormalTexture(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setNormalTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setOcclusionStrength:member(1)",
              "docComment": "/**\n * Sets (ambient) occlusion factor; linear multiplier. Affects `.occlusionTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOcclusionStrength(strength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "strength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setOcclusionStrength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setOcclusionTexture:member(1)",
              "docComment": "/**\n * Sets (ambient) occlusion texture. See {@link getOcclusionTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOcclusionTexture(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setOcclusionTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Material#setRoughnessFactor:member(1)",
              "docComment": "/**\n * Sets roughness factor; linear multiplier. Affects roughness channel of `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRoughnessFactor(factor: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "factor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setRoughnessFactor"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!MathUtils:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MathUtils "
            }
          ],
          "fileUrlPath": "dist/utils/math-utils.d.ts",
          "releaseTag": "Public",
          "name": "MathUtils",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.compose:member(1)",
              "docComment": "/**\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param srcTranslation - Translation element of matrix.\n *\n * @param srcRotation - Rotation element of matrix.\n *\n * @param srcScale - Scale element of matrix.\n *\n * @param dstMat - Matrix element, to be modified and returned.\n *\n * @returns dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static compose(srcTranslation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ", srcRotation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ", srcScale: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dstMat: "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "srcTranslation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "srcRotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "srcScale",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dstMat",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "compose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.decompose:member(1)",
              "docComment": "/**\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param srcMat - Matrix element, to be decomposed to TRS properties.\n *\n * @param dstTranslation - Translation element, to be overwritten.\n *\n * @param dstRotation - Rotation element, to be overwritten.\n *\n * @param dstScale - Scale element, to be overwritten.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static decompose(srcMat: "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": ", dstTranslation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dstRotation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ", dstScale: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "srcMat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dstTranslation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dstRotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dstScale",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "decompose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.denormalize:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static denormalize(c: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", componentType: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorComponentType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "c",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "componentType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "denormalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.eq:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static eq(a: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "eq"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.identity:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static identity(v: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "identity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!MathUtils.normalize:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static normalize(f: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", componentType: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.AccessorComponentType",
                  "canonicalReference": "@gltf-transform/core!GLTF.AccessorComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "f",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "componentType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "normalize"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Mesh:class",
          "docComment": "/**\n * # Mesh\n *\n * *Meshes define reusable geometry (triangles, lines, or points) and are instantiated by {@link Node}s.*\n *\n * Each draw call required to render a mesh is represented as a {@link Primitive}. Meshes typically have only a single {@link Primitive}, but may have more for various reasons. A mesh manages only a list of primitives — materials, morph targets, and other properties are managed on a per- primitive basis.\n *\n * When the same geometry and material should be rendered at multiple places in the scene, reuse the same Mesh instance and attach it to multiple nodes for better efficiency. Where the geometry is shared but the material is not, reusing {@link Accessor}s under different meshes and primitives can similarly improve transmission efficiency, although some rendering efficiency is lost as the number of materials in a scene increases.\n *\n * Usage:\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor);\n * const mesh = doc.createMesh('myMesh')\n * \t.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References: - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Mesh extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMesh",
              "canonicalReference": "@gltf-transform/core!~IMesh:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/mesh.d.ts",
          "releaseTag": "Public",
          "name": "Mesh",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#addPrimitive:member(1)",
              "docComment": "/**\n * Adds a {@link Primitive} to the mesh's draw call list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addPrimitive(primitive: "
                },
                {
                  "kind": "Reference",
                  "text": "Primitive",
                  "canonicalReference": "@gltf-transform/core!Primitive:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "primitive",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addPrimitive"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMesh",
                  "canonicalReference": "@gltf-transform/core!~IMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#getWeights:member(1)",
              "docComment": "/**\n * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must have the same number of targets. Most engines only support 4-8 active morph targets at a time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWeights(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWeights"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#listPrimitives:member(1)",
              "docComment": "/**\n * Lists {@link Primitive} draw calls of the mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listPrimitives(): "
                },
                {
                  "kind": "Reference",
                  "text": "Primitive",
                  "canonicalReference": "@gltf-transform/core!Primitive:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listPrimitives"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Mesh#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.MESH",
                  "canonicalReference": "@gltf-transform/core!PropertyType.MESH:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#removePrimitive:member(1)",
              "docComment": "/**\n * Removes a {@link Primitive} from the mesh's draw call list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removePrimitive(primitive: "
                },
                {
                  "kind": "Reference",
                  "text": "Primitive",
                  "canonicalReference": "@gltf-transform/core!Primitive:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "primitive",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removePrimitive"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Mesh#setWeights:member(1)",
              "docComment": "/**\n * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must have the same number of targets. Most engines only support 4-8 active morph targets at a time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setWeights(weights: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "weights",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setWeights"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Node_2:class",
          "docComment": "/**\n * # Node\n *\n * *Nodes are the objects that comprise a {@link Scene}.*\n *\n * Each node may have one or more children, and a transform (position, rotation, and scale) that applies to all of its descendants. A node may also reference (or \"instantiate\") other resources at its location, including {@link Mesh}, Camera, Light, and Skin properties. A node cannot be part of more than one {@link Scene}.\n *\n * A node's local transform is represented with array-like objects, intended to be compatible with [gl-matrix](https://github.com/toji/gl-matrix), or with the `toArray`/`fromArray` methods of libraries like three.js and babylon.js.\n *\n * Usage:\n * ```ts\n * const node = doc.createNode('myNode')\n * \t.setMesh(mesh)\n * \t.setTranslation([0, 0, 0])\n * \t.addChild(otherNode);\n * ```\n *\n * References: - [glTF → Nodes and Hierarchy](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#nodes-and-hierarchy)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Node extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "INode",
              "canonicalReference": "@gltf-transform/core!~INode:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/node.d.ts",
          "releaseTag": "Public",
          "name": "Node_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#addChild:member(1)",
              "docComment": "/**\n * Adds another node as a child of this one. Nodes cannot have multiple parents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChild(child: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "child",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addChild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#copy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", resolve?: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>(t: T) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resolve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getCamera:member(1)",
              "docComment": "/**\n * Returns the {@link Camera}, if any, instantiated at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCamera(): "
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getCamera"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "INode",
                  "canonicalReference": "@gltf-transform/core!~INode:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getMatrix:member(1)",
              "docComment": "/**\n * Returns the local matrix of this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMatrix(): "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getMesh:member(1)",
              "docComment": "/**\n * Returns the {@link Mesh}, if any, instantiated at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMesh(): "
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMesh"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getParent:member(1)",
              "docComment": "/**\n * Returns the unique parent ({@link Scene}, {@link Node}, or null) of this node in the scene hierarchy. Unrelated to {@link Property.listParents}, which lists all resource references.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getParent(): "
                },
                {
                  "kind": "Reference",
                  "text": "SceneNode",
                  "canonicalReference": "@gltf-transform/core!~SceneNode:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getParent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getRotation:member(1)",
              "docComment": "/**\n * Returns the rotation (quaternion) of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRotation(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getScale:member(1)",
              "docComment": "/**\n * Returns the scale of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScale(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getScale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getSkin:member(1)",
              "docComment": "/**\n * Returns the {@link Skin}, if any, instantiated at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSkin(): "
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getSkin"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getTranslation:member(1)",
              "docComment": "/**\n * Returns the translation (position) of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTranslation(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getTranslation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getWeights:member(1)",
              "docComment": "/**\n * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this node. Most engines only support 4-8 active morph targets at a time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWeights(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWeights"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getWorldMatrix:member(1)",
              "docComment": "/**\n * Returns the world matrix of this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldMatrix(): "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWorldMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getWorldRotation:member(1)",
              "docComment": "/**\n * Returns the rotation (quaternion) of this node in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldRotation(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWorldRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getWorldScale:member(1)",
              "docComment": "/**\n * Returns the scale of this node in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldScale(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWorldScale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#getWorldTranslation:member(1)",
              "docComment": "/**\n * Returns the translation (position) of this node in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldTranslation(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWorldTranslation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#listChildren:member(1)",
              "docComment": "/**\n * Lists all child nodes of this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listChildren"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Node_2#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.NODE",
                  "canonicalReference": "@gltf-transform/core!PropertyType.NODE:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#removeChild:member(1)",
              "docComment": "/**\n * Removes a node from this node's child node list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeChild(child: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "child",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeChild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setCamera:member(1)",
              "docComment": "/**\n * Sets a {@link Camera} to be instantiated at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCamera(camera: "
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setCamera"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setMatrix:member(1)",
              "docComment": "/**\n * Sets the local matrix of this node. Matrix will be decomposed to TRS properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMatrix(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "mat4",
                  "canonicalReference": "@gltf-transform/core!mat4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setMesh:member(1)",
              "docComment": "/**\n * Sets a {@link Mesh} to be instantiated at this node. A single mesh may be instatiated by multiple nodes; reuse of this sort is strongly encouraged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMesh(mesh: "
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mesh",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMesh"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setRotation:member(1)",
              "docComment": "/**\n * Sets the rotation (quaternion) of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRotation(rotation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec4",
                  "canonicalReference": "@gltf-transform/core!vec4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setScale:member(1)",
              "docComment": "/**\n * Sets the scale of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setScale(scale: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setScale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setSkin:member(1)",
              "docComment": "/**\n * Sets a {@link Skin} to be instantiated at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSkin(skin: "
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "skin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setSkin"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setTranslation:member(1)",
              "docComment": "/**\n * Sets the translation (position) of this node in local space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTranslation(translation: "
                },
                {
                  "kind": "Reference",
                  "text": "vec3",
                  "canonicalReference": "@gltf-transform/core!vec3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setTranslation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#setWeights:member(1)",
              "docComment": "/**\n * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this node. Most engines only support 4-8 active morph targets at a time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setWeights(weights: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "weights",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setWeights"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Node_2#traverse:member(1)",
              "docComment": "/**\n * Visits this {@link Node} and its descendants, top-down.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "traverse(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "traverse"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!NodeIO:class",
          "docComment": "/**\n * # NodeIO\n *\n * *I/O service for Node.js.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path. Methods are also available for converting in-memory representations of raw glTF files, both binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n * ```typescript\n * const { NodeIO } = require('@gltf-transform/core');\n *\n * const io = new NodeIO();\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb'); // → Document\n * document = await io.readBinary(glb);   // Uint8Array → Document\n *\n * // Write.\n * await io.write('model.glb', document);      // → void\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * By default, NodeIO can only read/write paths on disk. To enable HTTP requests, provide a Fetch API implementation (such as [`node-fetch`](https://www.npmjs.com/package/node-fetch)) and enable {@link setAllowHTTP}. HTTP requests may optionally be configured with [RequestInit](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) parameters.\n * ```typescript\n * import fetch from 'node-fetch';\n *\n * const io = new NodeIO(fetch, {headers: {...}}).setAllowHTTP(true);\n *\n * const document = await io.read('https://example.com/path/to/model.glb');\n * ```\n *\n * @category I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NodeIO extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformIO",
              "canonicalReference": "@gltf-transform/core!PlatformIO:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/io/node-io.d.ts",
          "releaseTag": "Public",
          "name": "NodeIO",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!NodeIO:constructor(1)",
              "docComment": "/**\n * Constructs a new NodeIO service. Instances are reusable. By default, only NodeIO can only read/write paths on disk. To enable HTTP requests, provide a Fetch API implementation and enable {@link setAllowHTTP}.\n *\n * @param fetch - Implementation of Fetch API.\n *\n * @param fetchConfig - Configuration object for Fetch API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(_fetch?: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", _fetchConfig?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestInit",
                  "canonicalReference": "!RequestInit:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_fetch",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "_fetchConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#dirname:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected dirname(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "dirname"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#readURI:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'view'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#readURI:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'text'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#resolve:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resolve(base: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "resolve"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#setAllowHTTP:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAllowHTTP(allow: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "allow",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAllowHTTP"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!NodeIO#write:member(1)",
              "docComment": "/**\n * Writes a {@link Document} instance to a local path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", doc: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "doc",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "write"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!Nullable:type",
          "docComment": "/**\n * TypeScript utility for nullable types.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Nullable<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]: T[P] | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "Nullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!PlatformIO:class",
          "docComment": "/**\n * # PlatformIO\n *\n * *Abstract I/O service.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path. Methods are also available for converting in-memory representations of raw glTF files, both binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * For platform-specific implementations, see {@link NodeIO}, {@link WebIO}, and {@link DenoIO}.\n *\n * @category I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class PlatformIO "
            }
          ],
          "fileUrlPath": "dist/io/platform-io.d.ts",
          "releaseTag": "Public",
          "name": "PlatformIO",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!PlatformIO#_logger:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@gltf-transform/core!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#binaryToJSON:member(1)",
              "docComment": "/**\n * Converts a GLB-formatted Uint8Array to a {@link JSONDocument}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "binaryToJSON(glb: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "glb",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "binaryToJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#detectFormat:member(1)",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected detectFormat(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Format",
                  "canonicalReference": "@gltf-transform/core!Format:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "detectFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#dirname:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract dirname(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "dirname"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!PlatformIO#lastReadBytes:member",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lastReadBytes: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lastReadBytes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!PlatformIO#lastWriteBytes:member",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lastWriteBytes: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lastWriteBytes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#read:member(1)",
              "docComment": "/**\n * Reads a {@link Document} from the given URI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "read(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "read"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readAsJSON:member(1)",
              "docComment": "/**\n * Loads a URI and returns a {@link JSONDocument} struct, without parsing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readAsJSON(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readAsJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readBinary:member(1)",
              "docComment": "/**\n * Converts a GLB-formatted Uint8Array to a {@link Document}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readBinary(glb: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "glb",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readBinary"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readJSON:member(1)",
              "docComment": "/**\n * Converts glTF-formatted JSON and a resource map to a {@link Document}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readJSON(jsonDoc: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonDoc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readURI:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Abstract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'view'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readURI:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'text'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#readURI:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'view' | 'text'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#registerDependencies:member(1)",
              "docComment": "/**\n * Registers dependencies used (e.g. by extensions) in the I/O process.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerDependencies(dependencies: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: unknown;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dependencies",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "registerDependencies"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#registerExtensions:member(1)",
              "docComment": "/**\n * Registers extensions, enabling I/O class to read and write glTF assets requiring them.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerExtensions(extensions: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "Extension",
                  "canonicalReference": "@gltf-transform/core!Extension:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extensions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "registerExtensions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#resolve:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract resolve(base: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "resolve"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#setLogger:member(1)",
              "docComment": "/**\n * Sets the {@link Logger} used by this I/O instance. Defaults to Logger.DEFAULT_INSTANCE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLogger(logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@gltf-transform/core!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "logger",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setLogger"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#setVertexLayout:member(1)",
              "docComment": "/**\n * Sets the vertex layout method used by this I/O instance. Defaults to VertexLayout.INTERLEAVED.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setVertexLayout(layout: "
                },
                {
                  "kind": "Reference",
                  "text": "VertexLayout",
                  "canonicalReference": "@gltf-transform/core!VertexLayout:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "layout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setVertexLayout"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#writeBinary:member(1)",
              "docComment": "/**\n * Converts a {@link Document} to a GLB-formatted Uint8Array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeBinary(doc: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "doc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "writeBinary"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PlatformIO#writeJSON:member(1)",
              "docComment": "/**\n * Converts a {@link Document} to glTF-formatted JSON and a resource map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeJSON(doc: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", _options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PublicWriterOptions",
                  "canonicalReference": "@gltf-transform/core!~PublicWriterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "doc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "writeJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Primitive:class",
          "docComment": "/**\n * # Primitive\n *\n * *Primitives are individual GPU draw calls comprising a {@link Mesh}.*\n *\n * Meshes typically have only a single Primitive, although various cases may require more. Each primitive may be assigned vertex attributes, morph target attributes, and a material. Any of these properties should be reused among multiple primitives where feasible.\n *\n * Primitives cannot be moved independently of other primitives within the same mesh, except through the use of morph targets and skinning. If independent movement or other runtime behavior is necessary (like raycasting or collisions) prefer to assign each primitive to a different mesh. The number of GPU draw calls is typically not affected by grouping or ungrouping primitives to a mesh.\n *\n * Each primitive may optionally be deformed by one or more morph targets, stored in a {@link PrimitiveTarget}.\n *\n * Usage:\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor)\n * \t.setMaterial(material);\n * mesh.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References: - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Primitive extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPrimitive",
              "canonicalReference": "@gltf-transform/core!~IPrimitive:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/primitive.d.ts",
          "releaseTag": "Public",
          "name": "Primitive",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#addTarget:member(1)",
              "docComment": "/**\n * Adds a morph target to the primitive. All primitives in the same mesh must have the same number of targets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTarget(target: "
                },
                {
                  "kind": "Reference",
                  "text": "PrimitiveTarget",
                  "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addTarget"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#getAttribute:member(1)",
              "docComment": "/**\n * Returns a vertex attribute as an {@link Accessor}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAttribute(semantic: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "semantic",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getAttribute"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPrimitive",
                  "canonicalReference": "@gltf-transform/core!~IPrimitive:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#getIndices:member(1)",
              "docComment": "/**\n * Returns an {@link Accessor} with indices of vertices to be drawn.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIndices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getIndices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#getMaterial:member(1)",
              "docComment": "/**\n * Returns the material used to render the primitive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMaterial(): "
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMaterial"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#getMode:member(1)",
              "docComment": "/**\n * Returns the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n *\n * Reference: - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMode(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MeshPrimitiveMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MeshPrimitiveMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#listAttributes:member(1)",
              "docComment": "/**\n * Lists all vertex attribute {@link Accessor}s associated with the primitive, excluding any attributes used for morph targets. For example, `[positionAccessor, normalAccessor, uvAccessor]`. Order will be consistent with the order returned by {@link .listSemantics}().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listAttributes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listAttributes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#listSemantics:member(1)",
              "docComment": "/**\n * Lists all vertex attribute semantics associated with the primitive, excluding any semantics used for morph targets. For example, `['POSITION', 'NORMAL', 'TEXCOORD_0']`. Order will be consistent with the order returned by {@link .listAttributes}().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listSemantics(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listSemantics"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#listTargets:member(1)",
              "docComment": "/**\n * Lists all morph targets associated with the primitive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listTargets(): "
                },
                {
                  "kind": "Reference",
                  "text": "PrimitiveTarget",
                  "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listTargets"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Primitive.Mode:member",
              "docComment": "/**\n * Type of primitives to render. All valid values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Mode: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MeshPrimitiveMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MeshPrimitiveMode:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Primitive#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.PRIMITIVE",
                  "canonicalReference": "@gltf-transform/core!PropertyType.PRIMITIVE:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#removeTarget:member(1)",
              "docComment": "/**\n * Removes a morph target from the primitive. All primitives in the same mesh must have the same number of targets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeTarget(target: "
                },
                {
                  "kind": "Reference",
                  "text": "PrimitiveTarget",
                  "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeTarget"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#setAttribute:member(1)",
              "docComment": "/**\n * Sets a vertex attribute to an {@link Accessor}. All attributes must have the same vertex count.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAttribute(semantic: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", accessor: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "semantic",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "accessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAttribute"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#setIndices:member(1)",
              "docComment": "/**\n * Sets an {@link Accessor} with indices of vertices to be drawn. In `TRIANGLES` draw mode, each set of three indices define a triangle. The front face has a counter-clockwise (CCW) winding order.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setIndices(indices: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indices",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setIndices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#setMaterial:member(1)",
              "docComment": "/**\n * Sets the material used to render the primitive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaterial(material: "
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "material",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMaterial"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Primitive#setMode:member(1)",
              "docComment": "/**\n * Sets the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n *\n * Reference: - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMode(mode: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.MeshPrimitiveMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.MeshPrimitiveMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMode"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!PrimitiveTarget:class",
          "docComment": "/**\n * # PrimitiveTarget\n *\n * *Morph target or shape key used to deform one {@link Primitive} in a {@link Mesh}.*\n *\n * A PrimitiveTarget contains a `POSITION` attribute (and optionally `NORMAL` and `TANGENT`) that can additively deform the base attributes on a {@link Mesh} {@link Primitive}. Vertex values of `0, 0, 0` in the target will have no effect, whereas a value of `0, 1, 0` would offset that vertex in the base geometry by y+=1. Morph targets can be fully or partially applied: their default state is controlled by {@link Mesh.getWeights}, which can also be overridden for a particular instantiation of a {@link Mesh}, using {@link Node.getWeights}.\n *\n * Reference: - [glTF → Morph Targets](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#morph-targets)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PrimitiveTarget extends "
            },
            {
              "kind": "Reference",
              "text": "Property",
              "canonicalReference": "@gltf-transform/core!Property:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPrimitiveTarget",
              "canonicalReference": "@gltf-transform/core!~IPrimitiveTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/primitive-target.d.ts",
          "releaseTag": "Public",
          "name": "PrimitiveTarget",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#getAttribute:member(1)",
              "docComment": "/**\n * Returns a morph target vertex attribute as an {@link Accessor}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAttribute(semantic: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "semantic",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getAttribute"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPrimitiveTarget",
                  "canonicalReference": "@gltf-transform/core!~IPrimitiveTarget:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#listAttributes:member(1)",
              "docComment": "/**\n * Lists all morph target vertex attribute {@link Accessor}s associated. Order will be consistent with the order returned by {@link .listSemantics}().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listAttributes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listAttributes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#listSemantics:member(1)",
              "docComment": "/**\n * Lists all morph target vertex attribute semantics associated. Order will be consistent with the order returned by {@link .listAttributes}().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listSemantics(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listSemantics"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.PRIMITIVE_TARGET",
                  "canonicalReference": "@gltf-transform/core!PropertyType.PRIMITIVE_TARGET:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!PrimitiveTarget#setAttribute:member(1)",
              "docComment": "/**\n * Sets a morph target vertex attribute to an {@link Accessor}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAttribute(semantic: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", accessor: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "semantic",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "accessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setAttribute"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Property:class",
          "docComment": "/**\n * # Property\n *\n * *Properties represent distinct resources in a glTF asset, referenced by other properties.*\n *\n * For example, each material and texture is a property, with material properties holding references to the textures. All properties are created with factory methods on the {@link Document} in which they should be constructed. Properties are destroyed by calling {@link dispose}().\n *\n * Usage:\n * ```ts\n * const texture = doc.createTexture('myTexture');\n * doc.listTextures(); // → [texture x 1]\n *\n * // Attach a texture to a material.\n * material.setBaseColorTexture(texture);\n * material.getBaseColortexture(); // → texture\n *\n * // Detaching a texture removes any references to it, except from the doc.\n * texture.detach();\n * material.getBaseColorTexture(); // → null\n * doc.listTextures(); // → [texture x 1]\n *\n * // Disposing a texture removes all references to it, and its own references.\n * texture.dispose();\n * doc.listTextures(); // → []\n * ```\n *\n * Reference: - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Property<T extends "
            },
            {
              "kind": "Reference",
              "text": "IProperty",
              "canonicalReference": "@gltf-transform/core!IProperty:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "IProperty",
              "canonicalReference": "@gltf-transform/core!IProperty:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "GraphNode",
              "canonicalReference": "property-graph!GraphNode:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/property.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "Property",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!Property:constructor(1)",
              "docComment": "/**\n * @hidden Constructs a new instance of the `Property` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(graph: "
                },
                {
                  "kind": "Reference",
                  "text": "Graph",
                  "canonicalReference": "property-graph!Graph:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "graph",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#clone:member(1)",
              "docComment": "/**\n * Makes a copy of this property, with the same resources (by reference) as the original.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#copy:member(1)",
              "docComment": "/**\n * Copies all data from another property to this one. Child properties are copied by reference, unless a 'resolve' function is given to override that.\n *\n * @param other - Property to copy references from.\n *\n * @param resolve - Function to resolve each Property being transferred. Default is identity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", resolve?: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyResolver",
                  "canonicalReference": "@gltf-transform/core!~PropertyResolver:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resolve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#detach:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detach(): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "detach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#equals:member(1)",
              "docComment": "/**\n * Returns true if two properties are deeply equivalent, recursively comparing the attributes of the properties. Optionally, a 'skip' set may be included, specifying attributes whose values should not be considered in the comparison.\n *\n * Example: Two {@link Primitive Primitives} are equivalent if they have accessors and materials with equivalent content — but not necessarily the same specific accessors and materials.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", skip?: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "skip",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#getDefaults:member(1)",
              "docComment": "/**\n * Returns default attributes for the property. Empty lists and maps should be initialized to empty arrays and objects. Always invoke `super.getDefaults()` and extend the result.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#getExtras:member(1)",
              "docComment": "/**\n * Returns a reference to the Extras object, containing application-specific data for this Property. Extras should be an Object, not a primitive value, for best portability.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getExtras(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getExtras"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#getName:member(1)",
              "docComment": "/**\n * Returns the name of this property. While names are not required to be unique, this is encouraged, and non-unique names will be overwritten in some tools. For custom data about a property, prefer to use Extras.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getName"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Property#graph:member",
              "docComment": "/**\n * Internal graph used to search and maintain references.\n *\n * @hidden\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly graph: "
                },
                {
                  "kind": "Reference",
                  "text": "Graph",
                  "canonicalReference": "property-graph!Graph:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "graph",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#init:member(1)",
              "docComment": "/**\n * Initializes instance data for a subclass. Because subclass constructors run after the constructor of the parent class, and 'create' events dispatched by the parent class assume the instance is fully initialized, it's best to do any initialization here.  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#listParents:member(1)",
              "docComment": "/**\n * Returns a list of all properties that hold a reference to this property. For example, a material may hold references to various textures, but a texture does not hold references to the materials that use it.\n *\n * It is often necessary to filter the results for a particular type: some resources, like {@link Accessor}s, may be referenced by different types of properties. Most properties include the {@link Root} as a parent, which is usually not of interest.\n *\n * Usage:\n * ```ts\n * const materials = texture\n * \t.listParents()\n * \t.filter((p) => p instanceof Material)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listParents(): "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listParents"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Property#propertyType:member",
              "docComment": "/**\n * Property type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract readonly propertyType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#setExtras:member(1)",
              "docComment": "/**\n * Updates the Extras object, containing application-specific data for this Property. Extras should be an Object, not a primitive value, for best portability.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setExtras(extras: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extras",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setExtras"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Property#setName:member(1)",
              "docComment": "/**\n * Sets the name of this property. While names are not required to be unique, this is encouraged, and non-unique names will be overwritten in some tools. For custom data about a property, prefer to use Extras.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setName(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setName"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/core!PropertyType:enum",
          "docComment": "/**\n * String IDs for core {@link Property} types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PropertyType "
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "PropertyType",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.ACCESSOR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ACCESSOR = "
                },
                {
                  "kind": "Content",
                  "text": "\"Accessor\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ACCESSOR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ANIMATION = "
                },
                {
                  "kind": "Content",
                  "text": "\"Animation\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ANIMATION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION_CHANNEL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ANIMATION_CHANNEL = "
                },
                {
                  "kind": "Content",
                  "text": "\"AnimationChannel\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ANIMATION_CHANNEL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.ANIMATION_SAMPLER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ANIMATION_SAMPLER = "
                },
                {
                  "kind": "Content",
                  "text": "\"AnimationSampler\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ANIMATION_SAMPLER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.BUFFER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BUFFER = "
                },
                {
                  "kind": "Content",
                  "text": "\"Buffer\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BUFFER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.CAMERA:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CAMERA = "
                },
                {
                  "kind": "Content",
                  "text": "\"Camera\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CAMERA"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.MATERIAL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MATERIAL = "
                },
                {
                  "kind": "Content",
                  "text": "\"Material\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MATERIAL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.MESH:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MESH = "
                },
                {
                  "kind": "Content",
                  "text": "\"Mesh\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MESH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.PRIMITIVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRIMITIVE = "
                },
                {
                  "kind": "Content",
                  "text": "\"Primitive\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRIMITIVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.PRIMITIVE_TARGET:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRIMITIVE_TARGET = "
                },
                {
                  "kind": "Content",
                  "text": "\"PrimitiveTarget\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRIMITIVE_TARGET"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.NODE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NODE = "
                },
                {
                  "kind": "Content",
                  "text": "\"Node\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NODE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.ROOT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ROOT = "
                },
                {
                  "kind": "Content",
                  "text": "\"Root\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ROOT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.SCENE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCENE = "
                },
                {
                  "kind": "Content",
                  "text": "\"Scene\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCENE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.SKIN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SKIN = "
                },
                {
                  "kind": "Content",
                  "text": "\"Skin\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SKIN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.TEXTURE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEXTURE = "
                },
                {
                  "kind": "Content",
                  "text": "\"Texture\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEXTURE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!PropertyType.TEXTURE_INFO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEXTURE_INFO = "
                },
                {
                  "kind": "Content",
                  "text": "\"TextureInfo\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEXTURE_INFO"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!ReaderContext:class",
          "docComment": "/**\n * Model class providing glTF-Transform objects representing each definition in the glTF file, used by a {@link Writer} and its {@link Extension} implementations. Indices of all properties will be consistent with the glTF file.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ReaderContext "
            }
          ],
          "fileUrlPath": "dist/io/reader-context.d.ts",
          "releaseTag": "Public",
          "name": "ReaderContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!ReaderContext:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ReaderContext` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(jsonDoc: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonDoc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#accessors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessors: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#animations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animations: "
                },
                {
                  "kind": "Reference",
                  "text": "Animation",
                  "canonicalReference": "@gltf-transform/core!Animation_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "animations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#buffers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffers: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "buffers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#bufferViewBuffers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bufferViewBuffers: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bufferViewBuffers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#bufferViews:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bufferViews: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bufferViews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#cameras:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameras: "
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameras",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#jsonDoc:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly jsonDoc: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "jsonDoc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#materials:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "materials: "
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "materials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#meshes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meshes: "
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "meshes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#nodes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nodes: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#scenes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scenes: "
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scenes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!ReaderContext#setTextureInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTextureInfo(textureInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": ", textureInfoDef: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textureInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "textureInfoDef",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setTextureInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#skins:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skins: "
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "skins",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#textureInfos:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textureInfos: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textureInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!ReaderContext#textures:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textures: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Root:class",
          "docComment": "/**\n * # Root\n *\n * *Root property of a glTF asset.*\n *\n * Any properties to be exported with a particular asset must be referenced (directly or indirectly) by the root. Metadata about the asset's license, generator, and glTF specification version are stored in the asset, accessible with {@link .getAsset}().\n *\n * Properties are added to the root with factory methods on its {@link Document}, and removed by calling {@link Property.dispose}() on the resource. Any properties that have been created but not disposed will be included when calling the various `root.list*()` methods.\n *\n * A document's root cannot be removed, and no other root may be created. Unlike other {@link Property} types, the `.dispose()`, `.detach()` methods have no useful function on a Root property.\n *\n * Usage:\n * ```ts\n * const root = document.getRoot();\n * const scene = document.createScene('myScene');\n * const node = document.createNode('myNode');\n * scene.addChild(node);\n *\n * console.log(root.listScenes()); // → [scene x 1]\n * ```\n *\n * Reference: [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Root extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IRoot",
              "canonicalReference": "@gltf-transform/core!~IRoot:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/root.d.ts",
          "releaseTag": "Public",
          "name": "Root",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#clone:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#copy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", resolve?: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>(t: T) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resolve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#getAsset:member(1)",
              "docComment": "/**\n * Returns the `asset` object, which specifies the target glTF version of the asset. Additional metadata can be stored in optional properties such as `generator` or `copyright`.\n *\n * Reference: [glTF → Asset](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#asset)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAsset(): "
                },
                {
                  "kind": "Reference",
                  "text": "IAsset",
                  "canonicalReference": "@gltf-transform/core!~IAsset:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAsset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRoot",
                  "canonicalReference": "@gltf-transform/core!~IRoot:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#getDefaultScene:member(1)",
              "docComment": "/**\n * Default {@link Scene} associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDefaultScene(): "
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaultScene"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listAccessors:member(1)",
              "docComment": "/**\n * Lists all {@link Accessor} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listAccessors(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listAccessors"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listAnimations:member(1)",
              "docComment": "/**\n * Lists all {@link Animation} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listAnimations(): "
                },
                {
                  "kind": "Reference",
                  "text": "Animation",
                  "canonicalReference": "@gltf-transform/core!Animation_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listAnimations"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listBuffers:member(1)",
              "docComment": "/**\n * Lists all {@link Buffer} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listBuffers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listBuffers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listCameras:member(1)",
              "docComment": "/**\n * Lists all {@link Camera} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listCameras(): "
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listCameras"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listExtensionsRequired:member(1)",
              "docComment": "/**\n * Lists all {@link Extension} properties enabled and required for this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listExtensionsRequired(): "
                },
                {
                  "kind": "Reference",
                  "text": "Extension",
                  "canonicalReference": "@gltf-transform/core!Extension:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listExtensionsRequired"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listExtensionsUsed:member(1)",
              "docComment": "/**\n * Lists all {@link Extension} properties enabled for this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listExtensionsUsed(): "
                },
                {
                  "kind": "Reference",
                  "text": "Extension",
                  "canonicalReference": "@gltf-transform/core!Extension:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listExtensionsUsed"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listMaterials:member(1)",
              "docComment": "/**\n * Lists all {@link Material} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listMaterials(): "
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listMaterials"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listMeshes:member(1)",
              "docComment": "/**\n * Lists all {@link Mesh} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listMeshes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listMeshes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listNodes:member(1)",
              "docComment": "/**\n * Lists all {@link Node} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listNodes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listNodes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listScenes:member(1)",
              "docComment": "/**\n * Lists all {@link Scene} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listScenes(): "
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listScenes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listSkins:member(1)",
              "docComment": "/**\n * Lists all {@link Skin} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listSkins(): "
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listSkins"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#listTextures:member(1)",
              "docComment": "/**\n * Lists all {@link Texture} properties associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listTextures(): "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listTextures"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Root#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.ROOT",
                  "canonicalReference": "@gltf-transform/core!PropertyType.ROOT:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Root#setDefaultScene:member(1)",
              "docComment": "/**\n * Default {@link Scene} associated with this root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultScene(defaultScene: "
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "defaultScene",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setDefaultScene"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Scene:class",
          "docComment": "/**\n * # Scene\n *\n * *Scenes represent a set of visual objects to render.*\n *\n * Typically a glTF file contains only a single scene, although more are allowed and useful in some cases. No particular meaning is associated with additional scenes, except as defined by the application. Scenes reference {@link Node}s, and a single node cannot be a member of more than one scene.\n *\n * References: - [glTF → Scenes](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#scenes) - [glTF → Coordinate System and Units](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#coordinate-system-and-units)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Scene extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IScene",
              "canonicalReference": "@gltf-transform/core!~IScene:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/scene.d.ts",
          "releaseTag": "Public",
          "name": "Scene",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#addChild:member(1)",
              "docComment": "/**\n * Adds a {@link Node} to the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChild(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addChild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#copy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ", resolve?: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"./property\")."
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>(t: T) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resolve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IScene",
                  "canonicalReference": "@gltf-transform/core!~IScene:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#listChildren:member(1)",
              "docComment": "/**\n * Lists all root {@link Node}s in the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listChildren"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Scene#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.SCENE",
                  "canonicalReference": "@gltf-transform/core!PropertyType.SCENE:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#removeChild:member(1)",
              "docComment": "/**\n * Removes a {@link Node} from the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeChild(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeChild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Scene#traverse:member(1)",
              "docComment": "/**\n * Visits each {@link Node} in the scene, including descendants, top-down.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "traverse(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "traverse"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Skin:class",
          "docComment": "/**\n * # Skin\n *\n * *Collection of {@link Node} joints and inverse bind matrices used with skinned {@link Mesh} instances.*\n *\n * Reference - [glTF → Skins](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#skins)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Skin extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISkin",
              "canonicalReference": "@gltf-transform/core!~ISkin:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/skin.d.ts",
          "releaseTag": "Public",
          "name": "Skin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#addJoint:member(1)",
              "docComment": "/**\n * Adds a joint {@link Node} to this {@link Skin}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addJoint(joint: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "joint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addJoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISkin",
                  "canonicalReference": "@gltf-transform/core!~ISkin:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#getInverseBindMatrices:member(1)",
              "docComment": "/**\n * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInverseBindMatrices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getInverseBindMatrices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#getSkeleton:member(1)",
              "docComment": "/**\n * {@link Node} used as a skeleton root. The node must be the closest common root of the joints hierarchy or a direct or indirect parent node of the closest common root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSkeleton(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getSkeleton"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#listJoints:member(1)",
              "docComment": "/**\n * Lists joints ({@link Node}s used as joints or bones) in this {@link Skin}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listJoints(): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listJoints"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Skin#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.SKIN",
                  "canonicalReference": "@gltf-transform/core!PropertyType.SKIN:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#removeJoint:member(1)",
              "docComment": "/**\n * Removes a joint {@link Node} from this {@link Skin}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeJoint(joint: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "joint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeJoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#setInverseBindMatrices:member(1)",
              "docComment": "/**\n * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInverseBindMatrices(inverseBindMatrices: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "inverseBindMatrices",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setInverseBindMatrices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Skin#setSkeleton:member(1)",
              "docComment": "/**\n * {@link Node} used as a skeleton root. The node must be the closest common root of the joints hierarchy or a direct or indirect parent node of the closest common root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSkeleton(skeleton: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "skeleton",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setSkeleton"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!Texture:class",
          "docComment": "/**\n * # Texture\n *\n * *Texture, or images, referenced by {@link Material} properties.*\n *\n * Textures in glTF-Transform are a combination of glTF's `texture` and `image` properties, and should be unique within a document, such that no other texture contains the same {@link getImage}() data. Where duplicates may already exist, the `dedup({textures: true})` transform can remove them. A {@link Document} with N texture properties will be exported to a glTF file with N `image` properties, and the minimum number of `texture` properties necessary for the materials that use it.\n *\n * For properties associated with a particular _use_ of a texture, see {@link TextureInfo}.\n *\n * Reference: - [glTF → Textures](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#textures) - [glTF → Images](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#images)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Texture extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITexture",
              "canonicalReference": "@gltf-transform/core!~ITexture:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/texture.d.ts",
          "releaseTag": "Public",
          "name": "Texture",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITexture",
                  "canonicalReference": "@gltf-transform/core!~ITexture:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#getImage:member(1)",
              "docComment": "/**\n * Returns the raw image data for this texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getImage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#getMimeType:member(1)",
              "docComment": "/**\n * Returns the MIME type for this texture ('image/jpeg' or 'image/png').\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMimeType(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMimeType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#getSize:member(1)",
              "docComment": "/**\n * Returns the size, in pixels, of this texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSize(): "
                },
                {
                  "kind": "Reference",
                  "text": "vec2",
                  "canonicalReference": "@gltf-transform/core!vec2:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#getURI:member(1)",
              "docComment": "/**\n * Returns the URI (e.g. 'path/to/file.png') for this texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getURI(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#init:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!Texture#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.TEXTURE",
                  "canonicalReference": "@gltf-transform/core!PropertyType.TEXTURE:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#setImage:member(1)",
              "docComment": "/**\n * Sets the raw image data for this texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setImage(image: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "image",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#setMimeType:member(1)",
              "docComment": "/**\n * Sets the MIME type for this texture ('image/jpeg' or 'image/png'). If the texture does not have a URI, a MIME type is required for correct export.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMimeType(mimeType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mimeType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMimeType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!Texture#setURI:member(1)",
              "docComment": "/**\n * Sets the URI (e.g. 'path/to/file.png') for this texture. If the texture does not have a MIME type, a URI is required for correct export.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setURI"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/core!TextureChannel:enum",
          "docComment": "/**\n * Texture channels.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TextureChannel "
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "TextureChannel",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!TextureChannel.R:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "R = "
                },
                {
                  "kind": "Content",
                  "text": "4096"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "R"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!TextureChannel.G:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "G = "
                },
                {
                  "kind": "Content",
                  "text": "256"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "G"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!TextureChannel.B:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "B = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "B"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!TextureChannel.A:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "A = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "A"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!TextureInfo:class",
          "docComment": "/**\n * # TextureInfo\n *\n * *Settings associated with a particular use of a {@link Texture}.*\n *\n * Different materials may reuse the same texture but with different texture coordinates, minFilter/magFilter, or wrapS/wrapT settings. The TextureInfo class contains settings derived from both the \"TextureInfo\" and \"Sampler\" properties in the glTF specification, consolidated here for simplicity.\n *\n * TextureInfo properties cannot be directly created. For any material texture slot, such as baseColorTexture, there will be a corresponding method to obtain the TextureInfo for that slot. For example, see {@link Material.getBaseColorTextureInfo}.\n *\n * References: - [glTF → Texture Info](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#reference-textureinfo)\n *\n * @category Properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextureInfo extends "
            },
            {
              "kind": "Reference",
              "text": "ExtensibleProperty",
              "canonicalReference": "@gltf-transform/core!ExtensibleProperty:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextureInfo",
              "canonicalReference": "@gltf-transform/core!~ITextureInfo:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/properties/texture-info.d.ts",
          "releaseTag": "Public",
          "name": "TextureInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getDefaults:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getDefaults(): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@gltf-transform/core!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!~ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getMagFilter:member(1)",
              "docComment": "/**\n * Returns the magnification filter applied to the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMagFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMagFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMagFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMagFilter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getMinFilter:member(1)",
              "docComment": "/**\n * Sets the minification filter applied to the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMinFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMinFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMinFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMinFilter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getTexCoord:member(1)",
              "docComment": "/**\n * Returns the texture coordinate (UV set) index for the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTexCoord(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getTexCoord"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getWrapS:member(1)",
              "docComment": "/**\n * Returns the S (U) wrapping mode for UVs used by the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWrapS(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureWrapMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWrapS"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#getWrapT:member(1)",
              "docComment": "/**\n * Returns the T (V) wrapping mode for UVs used by the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWrapT(): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureWrapMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getWrapT"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#init:member(1)",
              "docComment": "/**\n * ******************************************************************************************** Instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected init(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!TextureInfo.MagFilter:member",
              "docComment": "/**\n * Magnification filter. Values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MagFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMagFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMagFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MagFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!TextureInfo.MinFilter:member",
              "docComment": "/**\n * Minification filter. Values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MinFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMinFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMinFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MinFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!TextureInfo#propertyType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propertyType: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyType.TEXTURE_INFO",
                  "canonicalReference": "@gltf-transform/core!PropertyType.TEXTURE_INFO:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propertyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#setMagFilter:member(1)",
              "docComment": "/**\n * Sets the magnification filter applied to the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMagFilter(magFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMagFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMagFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "magFilter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMagFilter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#setMinFilter:member(1)",
              "docComment": "/**\n * Returns the minification filter applied to the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinFilter(minFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureMinFilter",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureMinFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minFilter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setMinFilter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#setTexCoord:member(1)",
              "docComment": "/**\n * Sets the texture coordinate (UV set) index for the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTexCoord(texCoord: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texCoord",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setTexCoord"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#setWrapS:member(1)",
              "docComment": "/**\n * Sets the S (U) wrapping mode for UVs used by the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setWrapS(wrapS: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureWrapMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "wrapS",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setWrapS"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!TextureInfo#setWrapT:member(1)",
              "docComment": "/**\n * Sets the T (V) wrapping mode for UVs used by the texture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setWrapT(wrapT: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureWrapMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "wrapT",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setWrapT"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!TextureInfo.WrapMode:member",
              "docComment": "/**\n * UV wrapping mode. Values correspond to WebGL enums.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static WrapMode: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.TextureWrapMode",
                  "canonicalReference": "@gltf-transform/core!GLTF.TextureWrapMode:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "WrapMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!Transform:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Transform = "
            },
            {
              "kind": "Content",
              "text": "(doc: "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "@gltf-transform/core!Document_2:class"
            },
            {
              "kind": "Content",
              "text": ", context?: "
            },
            {
              "kind": "Reference",
              "text": "TransformContext",
              "canonicalReference": "@gltf-transform/core!TransformContext:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/document.d.ts",
          "releaseTag": "Public",
          "name": "Transform",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@gltf-transform/core!TransformContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransformContext "
            }
          ],
          "fileUrlPath": "dist/document.d.ts",
          "releaseTag": "Public",
          "name": "TransformContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@gltf-transform/core!TransformContext#stack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stack: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stack",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!TypedArray:type",
          "docComment": "/**\n * Abstraction representing any one of the typed array classes supported by glTF and JavaScript.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypedArray = "
            },
            {
              "kind": "Reference",
              "text": "Float32Array",
              "canonicalReference": "!Float32Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint32Array",
              "canonicalReference": "!Uint32Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint16Array",
              "canonicalReference": "!Uint16Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int16Array",
              "canonicalReference": "!Int16Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int8Array",
              "canonicalReference": "!Int8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "TypedArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!TypedArrayConstructor:type",
          "docComment": "/**\n * Abstraction representing the typed array constructors supported by glTF and JavaScript.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypedArrayConstructor = "
            },
            {
              "kind": "Reference",
              "text": "Float32ArrayConstructor",
              "canonicalReference": "!Float32ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint32ArrayConstructor",
              "canonicalReference": "!Uint32ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint16ArrayConstructor",
              "canonicalReference": "!Uint16ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8ArrayConstructor",
              "canonicalReference": "!Uint8ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int16ArrayConstructor",
              "canonicalReference": "!Int16ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int8ArrayConstructor",
              "canonicalReference": "!Int8ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "TypedArrayConstructor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/core!uuid:var",
          "docComment": "/**\n * Short ID generator.\n *\n * Generated IDs are short, easy to type, and unique for the duration of the program's execution. Uniqueness across multiple program executions, or on other devices, is not guaranteed. Based on [Short ID Generation in JavaScript](https://tomspencer.dev/blog/2014/11/16/short-id-generation-in-javascript/), with alterations.\n *\n * @category Utilities  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "uuid: "
            },
            {
              "kind": "Content",
              "text": "() => string"
            }
          ],
          "fileUrlPath": "dist/utils/uuid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "uuid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!vec2:type",
          "docComment": "/**\n * 2-dimensional vector.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type vec2 = "
            },
            {
              "kind": "Content",
              "text": "[number, number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "vec2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!vec3:type",
          "docComment": "/**\n * 3-dimensional vector.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type vec3 = "
            },
            {
              "kind": "Content",
              "text": "[number, number, number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "vec3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@gltf-transform/core!vec4:type",
          "docComment": "/**\n * 4-dimensional vector, e.g. RGBA or a quaternion.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type vec4 = "
            },
            {
              "kind": "Content",
              "text": "[number, number, number, number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "vec4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/core!Verbosity:enum",
          "docComment": "/**\n * Logger verbosity thresholds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Verbosity "
            }
          ],
          "fileUrlPath": "dist/utils/logger.d.ts",
          "releaseTag": "Public",
          "name": "Verbosity",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Verbosity.SILENT:member",
              "docComment": "/**\n * No events are logged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SILENT = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SILENT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Verbosity.ERROR:member",
              "docComment": "/**\n * Only error events are logged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERROR = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERROR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Verbosity.WARN:member",
              "docComment": "/**\n * Only error and warn events are logged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WARN = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "WARN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Verbosity.INFO:member",
              "docComment": "/**\n * Only error, warn, and info events are logged. (DEFAULT)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "INFO = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "INFO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!Verbosity.DEBUG:member",
              "docComment": "/**\n * All events are logged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DEBUG = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DEBUG"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@gltf-transform/core!VERSION:var",
          "docComment": "/**\n * Current version of the package.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VERSION: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VERSION",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@gltf-transform/core!VertexLayout:enum",
          "docComment": "/**\n * Vertex layout method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum VertexLayout "
            }
          ],
          "fileUrlPath": "dist/constants.d.ts",
          "releaseTag": "Public",
          "name": "VertexLayout",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!VertexLayout.INTERLEAVED:member",
              "docComment": "/**\n * Stores vertex attributes in a single buffer view per mesh primitive. Interleaving vertex data may improve performance by reducing page-thrashing in GPU memory.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "INTERLEAVED = "
                },
                {
                  "kind": "Content",
                  "text": "\"interleaved\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "INTERLEAVED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@gltf-transform/core!VertexLayout.SEPARATE:member",
              "docComment": "/**\n * Stores each vertex attribute in a separate buffer view. May decrease performance by causing page-thrashing in GPU memory. Some 3D engines may prefer this layout, e.g. for simplicity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SEPARATE = "
                },
                {
                  "kind": "Content",
                  "text": "\"separate\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SEPARATE"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!WebIO:class",
          "docComment": "/**\n * # WebIO\n *\n * *I/O service for Web.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path. Methods are also available for converting in-memory representations of raw glTF files, both binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n * ```typescript\n * import { WebIO } from '@gltf-transform/core';\n *\n * const io = new WebIO({credentials: 'include'});\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb');  // → Document\n * document = await io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WebIO extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformIO",
              "canonicalReference": "@gltf-transform/core!PlatformIO:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/io/web-io.d.ts",
          "releaseTag": "Public",
          "name": "WebIO",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!WebIO:constructor(1)",
              "docComment": "/**\n * Constructs a new WebIO service. Instances are reusable.\n *\n * @param fetchConfig - Configuration object for Fetch API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(fetchConfig?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestInit",
                  "canonicalReference": "!RequestInit:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fetchConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WebIO#detectFormat:member(1)",
              "docComment": "/**\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected detectFormat(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Format",
                  "canonicalReference": "@gltf-transform/core!Format:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "detectFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WebIO#dirname:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected dirname(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "dirname"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WebIO#readURI:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'view'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WebIO#readURI:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readURI(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "'text'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "readURI"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WebIO#resolve:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resolve(base: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "resolve"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@gltf-transform/core!WriterContext:class",
          "docComment": "/**\n * Model class providing writing state to a {@link Writer} and its {@link Extension} implementations.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WriterContext "
            }
          ],
          "fileUrlPath": "dist/io/writer-context.d.ts",
          "releaseTag": "Public",
          "name": "WriterContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@gltf-transform/core!WriterContext:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WriterContext` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(_doc: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "@gltf-transform/core!Document_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", jsonDoc: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriterOptions",
                  "canonicalReference": "@gltf-transform/core!~WriterOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_doc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "jsonDoc",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#accessorIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly accessorIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessorIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#accessorParents:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly accessorParents: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"../properties\")."
                },
                {
                  "kind": "Reference",
                  "text": "IProperty",
                  "canonicalReference": "@gltf-transform/core!IProperty:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessorParents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#accessorUsageGroupedByParent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly accessorUsageGroupedByParent: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessorUsageGroupedByParent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#addAccessorToUsageGroup:member(1)",
              "docComment": "/**\n * Sets usage for the given accessor. Some accessor types must be grouped into buffer views with like accessors. This includes the specified buffer view \"targets\", but also implicit usage like IBMs or instanced mesh attributes. If unspecified, an accessor will be grouped with other accessors of unspecified usage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addAccessorToUsageGroup(accessor: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": ", usage: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferViewUsage",
                  "canonicalReference": "@gltf-transform/core!~BufferViewUsage:enum"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "usage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addAccessorToUsageGroup"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#animationIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly animationIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Animation",
                  "canonicalReference": "@gltf-transform/core!Animation_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "animationIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#bufferIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly bufferIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bufferIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#bufferURIGenerator:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bufferURIGenerator: "
                },
                {
                  "kind": "Reference",
                  "text": "UniqueURIGenerator",
                  "canonicalReference": "@gltf-transform/core!~UniqueURIGenerator:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bufferURIGenerator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext.BufferViewTarget:member",
              "docComment": "/**\n * Explicit buffer view targets defined by glTF specification.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly BufferViewTarget: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "BufferViewTarget",
                  "canonicalReference": "@gltf-transform/core!~BufferViewTarget:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "BufferViewTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext.BufferViewUsage:member",
              "docComment": "/**\n * Implicit buffer view usage, not required by glTF specification, but nonetheless useful for proper grouping of accessors into buffer views. Additional usages are defined by extensions, like `EXT_mesh_gpu_instancing`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly BufferViewUsage: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "BufferViewUsage",
                  "canonicalReference": "@gltf-transform/core!~BufferViewUsage:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "BufferViewUsage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#cameraIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly cameraIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "@gltf-transform/core!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#createAccessorDef:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAccessorDef(accessor: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.IAccessor",
                  "canonicalReference": "@gltf-transform/core!GLTF.IAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createAccessorDef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#createImageData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createImageData(imageDef: "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.IImage",
                  "canonicalReference": "@gltf-transform/core!GLTF.IImage:interface"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageDef",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createImageData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#createPropertyDef:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createPropertyDef(property: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "@gltf-transform/core!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyDef",
                  "canonicalReference": "@gltf-transform/core!~PropertyDef:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "property",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createPropertyDef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#createTextureInfoDef:member(1)",
              "docComment": "/**\n * Creates a TextureInfo definition, and any Texture or Sampler definitions it requires. If possible, Texture and Sampler definitions are shared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTextureInfoDef(texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": ", textureInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "textureInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createTextureInfoDef"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#extensionData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly extensionData: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: unknown;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extensionData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#getAccessorUsage:member(1)",
              "docComment": "/**\n * Returns implicit usage type of the given accessor, related to grouping accessors into buffer views. Usage is a superset of buffer view target, including ARRAY_BUFFER and ELEMENT_ARRAY_BUFFER, but also usages that do not match GPU buffer view targets such as IBMs. Additional usages are defined by extensions, like `EXT_mesh_gpu_instancing`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAccessorUsage(accessor: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BufferViewUsage",
                  "canonicalReference": "@gltf-transform/core!~BufferViewUsage:enum"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getAccessorUsage"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#imageBufferViews:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly imageBufferViews: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageBufferViews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#imageIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly imageIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#imageURIGenerator:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageURIGenerator: "
                },
                {
                  "kind": "Reference",
                  "text": "UniqueURIGenerator",
                  "canonicalReference": "@gltf-transform/core!~UniqueURIGenerator:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@gltf-transform/core!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageURIGenerator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#jsonDoc:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly jsonDoc: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDocument",
                  "canonicalReference": "@gltf-transform/core!JSONDocument:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "jsonDoc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@gltf-transform/core!WriterContext#listAccessorUsageGroups:member(1)",
              "docComment": "/**\n * Lists accessors grouped by usage. Accessors with unspecified usage are not included.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listAccessorUsageGroups(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Accessor",
                  "canonicalReference": "@gltf-transform/core!Accessor:class"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "listAccessorUsageGroups"
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#logger:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@gltf-transform/core!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#materialIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly materialIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Material",
                  "canonicalReference": "@gltf-transform/core!Material:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "materialIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#meshIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly meshIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "@gltf-transform/core!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "meshIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#nodeIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nodeIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@gltf-transform/core!Node_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodeIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriterOptions",
                  "canonicalReference": "@gltf-transform/core!~WriterOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#otherBufferViews:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly otherBufferViews: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "@gltf-transform/core!Buffer_2:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "otherBufferViews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#otherBufferViewsIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly otherBufferViewsIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "otherBufferViewsIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#samplerDefIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly samplerDefIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "samplerDefIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#sceneIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sceneIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "@gltf-transform/core!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sceneIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#skinIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly skinIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Skin",
                  "canonicalReference": "@gltf-transform/core!Skin:class"
                },
                {
                  "kind": "Content",
                  "text": ", number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "skinIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#textureDefIndexMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly textureDefIndexMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textureDefIndexMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext#textureInfoDefMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly textureInfoDefMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextureInfo",
                  "canonicalReference": "@gltf-transform/core!TextureInfo:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "GLTF.ITextureInfo",
                  "canonicalReference": "@gltf-transform/core!GLTF.ITextureInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textureInfoDefMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@gltf-transform/core!WriterContext.USAGE_TO_TARGET:member",
              "docComment": "/**\n * Maps usage type to buffer view target. Usages not mapped have undefined targets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly USAGE_TO_TARGET: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferViewTarget",
                  "canonicalReference": "@gltf-transform/core!~BufferViewTarget:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "USAGE_TO_TARGET",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
